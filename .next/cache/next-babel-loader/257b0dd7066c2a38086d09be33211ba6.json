{"ast":null,"code":"var _jsxFileName = \"/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/users/detail/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../../components/Layout';\nimport ListDetail from '../../../components/ListDetail';\nimport { gql } from \"@apollo/client\";\nimport { useRouter } from \"next/router\";\nconst DETAIL_USER = gql`\n    query ppl($queryStr: String!) {\n        product(queryStr: $queryStr) {\n            id\n            name\n        }\n    }\n`;\nconst router = useRouter();\nconsole.log('router.query', router.query);\n\nconst StaticPropsDetail = ({\n  item,\n  errors\n}) => {\n  console.log(2222);\n\n  if (errors) {\n    return __jsx(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }, \"Error:\"), \" \", errors));\n  }\n\n  return __jsx(Layout, {\n    title: `${item ? item.name : 'User Detail'} | Next.js + TypeScript Example`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, item && __jsx(ListDetail, {\n    item: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }\n  }));\n};\n\nexport default StaticPropsDetail; // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nexport const getServerSideProps = async ({\n  ctx\n}) => {\n  console.log(11111111, ctx); // const { loading, data } = await client.query({\n  //   query: DETAIL_USER,\n  //   variables: {\n  //     queryStr: ctx.query?.id\n  //   }\n  // })\n  //\n  // console.log(data)\n  //\n\n  return {\n    props: {\n      loading: 111\n    }\n  };\n};","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/users/detail/index.tsx"],"names":["Layout","ListDetail","gql","useRouter","DETAIL_USER","router","console","log","query","StaticPropsDetail","item","errors","color","name","getServerSideProps","ctx","props","loading"],"mappings":";;;AAIA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AAGA,SAAQC,GAAR,QAAkB,gBAAlB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAEA,MAAMC,WAAW,GAAGF,GAAI;;;;;;;CAAxB;AAaA,MAAMG,MAAM,GAAGF,SAAS,EAAxB;AACAG,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,MAAM,CAACG,KAAnC;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA6B;AACrDL,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;;AACA,MAAII,MAAJ,EAAY;AACV,WACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDD,MADhD,CADF,CADF;AAOD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAG,GACND,IAAI,GAAGA,IAAI,CAACG,IAAR,GAAe,aACpB,iCAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGH,IAAI,IAAI,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALX,CADF;AASD,CArBD;;AAuBA,eAAeD,iBAAf,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMK,kBAAsC,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAmB;AAEvET,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBQ,GAAtB,EAFuE,CAGvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE;AADJ;AADF,GAAP;AAKD,CAjBM","sourcesContent":["import {GetStaticProps, GetStaticPaths, GetServerSideProps} from 'next'\n\nimport { Ppl } from '../../../interfaces'\nimport { sampleUserData } from '../../utils/sample-data'\nimport Layout from '../../../components/Layout'\nimport ListDetail from '../../../components/ListDetail'\nimport client from \"../../apollo\";\nimport {AllUsersQuery} from \"../index\";\nimport {gql} from \"@apollo/client\";\nimport {useRouter} from \"next/router\";\n\nconst DETAIL_USER = gql`\n    query ppl($queryStr: String!) {\n        product(queryStr: $queryStr) {\n            id\n            name\n        }\n    }\n`\n\ntype Props = {\n  item?: Ppl\n  errors?: string\n}\nconst router = useRouter();\nconsole.log('router.query', router.query)\n\nconst StaticPropsDetail = ({ item, errors }: Props) => {\n  console.log(2222)\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: 'red' }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout\n      title={`${\n        item ? item.name : 'User Detail'\n      } | Next.js + TypeScript Example`}\n    >\n      {item && <ListDetail item={item} />}\n    </Layout>\n  )\n}\n\nexport default StaticPropsDetail\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getServerSideProps: GetServerSideProps = async ({ ctx }) => {\n\n  console.log(11111111, ctx)\n  // const { loading, data } = await client.query({\n  //   query: DETAIL_USER,\n  //   variables: {\n  //     queryStr: ctx.query?.id\n  //   }\n  // })\n  //\n  // console.log(data)\n  //\n  return {\n    props: {\n      loading: 111\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}