{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Modal, Backdrop, Fade, Button, CircularProgress, Box, FormGroup, TextField } from '@material-ui/core';\nimport { request } from \"graphql-request\";\nimport { mutate, trigger } from 'swr';\nimport useStyles from './style';\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { object, string } from \"yup\";\n\nvar sleep = function sleep(time) {\n  return new Promise(function (acc) {\n    return setTimeout(acc, time);\n  });\n};\n/* GraphQL */\n\n\nvar REMOVE_PRODUCT =\n/* GraphQL */\n\"\\n    mutation removeProductById($id: String!) {\\n        removeProductById(id: $id) {\\n            id\\n            name\\n        }\\n    }\\n\";\nvar API = 'http://localhost:3000/api/graphql';\nvar initialValues = {\n  name: ''\n}; // @ts-ignore\n\nexport default function TransitionsModal(_ref) {\n  var products = _ref.products,\n      redirectRouting = _ref.redirectRouting,\n      currentPage = _ref.currentPage,\n      handleOpen = _ref.handleOpen,\n      product = _ref.product,\n      handleClose = _ref.handleClose,\n      open = _ref.open,\n      isEdit = _ref.isEdit;\n  var classes = useStyles();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var handleRemoveInModal = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var id;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              e.stopPropagation();\n              _context.next = 4;\n              return setIsLoading(true);\n\n            case 4:\n              _context.next = 6;\n              return sleep(2000);\n\n            case 6:\n              id = product.id;\n              console.log('products', products);\n              _context.next = 10;\n              return mutate(API, _toConsumableArray(products === null || products === void 0 ? void 0 : products.filter(function (p) {\n                return (p === null || p === void 0 ? void 0 : p.id) != id;\n              })), false);\n\n            case 10:\n              _context.next = 12;\n              return request(API, REMOVE_PRODUCT, {\n                id: id\n              });\n\n            case 12:\n              _context.next = 14;\n              return trigger(API);\n\n            case 14:\n              _context.next = 16;\n              return handleClose(e);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleRemoveInModal(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", null, __jsx(Modal, {\n    className: classes.modal,\n    open: open,\n    onClose: handleClose,\n    closeAfterTransition: true,\n    BackdropComponent: Backdrop,\n    BackdropProps: {\n      timeout: 500\n    }\n  }, __jsx(Fade, {\n    \"in\": open\n  }, __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(\"h2\", {\n    id: \"transition-modal-title\"\n  }, isEdit ? 'EDIT' : 'DELETE', \" THIS PRODUCT\"), __jsx(\"p\", {\n    id: \"transition-modal-description\"\n  }, \"Do you want to \", isEdit ? 'edit' : 'delete', \" this item?.\"), isEdit ? __jsx(Formik, {\n    validationSchema: object({\n      name: string().required().min(2).max(50)\n    }),\n    initialValues: initialValues,\n    onSubmit: function onSubmit() {}\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting;\n    return __jsx(Form, null, __jsx(Box, null, __jsx(FormGroup, null, __jsx(Field, {\n      name: \"name\",\n      as: TextField,\n      label: \"Name\"\n    }), __jsx(ErrorMessage, {\n      name: \"name\"\n    }))), __jsx(Button, {\n      size: \"small\",\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      disabled: isSubmitting\n    }, \"SUBMIT\"), __jsx(Button, {\n      size: \"small\",\n      variant: \"outlined\",\n      color: \"default\",\n      type: \"submit\",\n      onClick: handleClose,\n      disabled: isLoading\n    }, \"CANCEL\"));\n  }) : __jsx(React.Fragment, null, __jsx(Button, {\n    size: \"small\",\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleRemoveInModal,\n    startIcon: isLoading ? __jsx(CircularProgress, {\n      size: \"1rem\"\n    }) : null,\n    disabled: isLoading\n  }, \"REMOVE\"), __jsx(Button, {\n    size: \"small\",\n    variant: \"outlined\",\n    color: \"default\",\n    type: \"submit\",\n    onClick: handleClose,\n    disabled: isLoading\n  }, \"CANCEL\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}