{"ast":null,"code":"import { schema, use } from \"nexus\";\nimport { prisma } from \"nexus-plugin-prisma\";\nimport { idArg, stringArg } from \"nexus/components/schema\";\nuse(prisma({\n  features: {\n    crud: true\n  }\n})); // use(\n//   prisma({\n//     client: { instance: new PrismaClient() },\n//   })\n// )\n\nschema.objectType({\n  name: \"Ppl\",\n\n  definition(t) {\n    t.model.id();\n    t.model.username();\n    t.model.email();\n    t.model.password();\n    t.model.role();\n    t.model.status();\n  }\n\n});\nschema.objectType({\n  name: \"Product\",\n\n  definition(t) {\n    t.model.id();\n    t.model.name();\n  }\n\n});\nschema.addToContext(_req => {\n  return {\n    customReq: _req\n  };\n});\nschema.queryType({\n  async definition(t) {\n    t.list.field(\"allUsers\", {\n      type: \"Ppl\",\n      args: {\n        skip: schema.stringArg({\n          nullable: true\n        }),\n        take: schema.stringArg({\n          nullable: true\n        })\n      },\n\n      resolve(_parent, _args, ctx) {\n        return ctx.db.ppl.findMany({\n          skip: parseInt(_args === null || _args === void 0 ? void 0 : _args.skip),\n          take: parseInt(_args === null || _args === void 0 ? void 0 : _args.take)\n        });\n      }\n\n    });\n    t.list.field(\"ppl\", {\n      type: \"Ppl\",\n      args: {\n        queryStr: schema.stringArg({\n          nullable: true\n        })\n      },\n      resolve: async (_parent, _args, ctx) => {\n        try {\n          const ppl = await ctx.db.ppl.findMany({\n            where: {\n              OR: [{\n                id: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }, {\n                username: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }]\n            }\n          }); // const product = t.crud.product(_args?.id!.toString() as ProductWhereUniqueInput);\n\n          return ppl;\n        } catch (error) {\n          throw new Error(error);\n        }\n      }\n    });\n    t.list.field(\"allProducts\", {\n      type: \"Product\",\n      args: {\n        skip: schema.stringArg({\n          nullable: true\n        }),\n        take: schema.stringArg({\n          nullable: true\n        })\n      },\n\n      resolve(_parent, _args, ctx) {\n        return ctx.db.product.findMany({\n          skip: parseInt(_args === null || _args === void 0 ? void 0 : _args.skip),\n          take: parseInt(_args === null || _args === void 0 ? void 0 : _args.take)\n        });\n      }\n\n    });\n    t.list.field(\"product\", {\n      type: \"Product\",\n      args: {\n        queryStr: schema.stringArg({\n          nullable: true\n        })\n      },\n      resolve: async (_parent, _args, ctx) => {\n        try {\n          const product = await ctx.db.product.findMany({\n            where: {\n              OR: [{\n                id: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }, {\n                name: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }]\n            }\n          }); // const product = t.crud.product(_args?.id!.toString() as ProductWhereUniqueInput);\n\n          return product;\n        } catch (error) {\n          throw new Error(error);\n        }\n      }\n    }); // t.crud.product();\n    // t.crud.products();\n  }\n\n});\nschema.mutationType({\n  definition(t) {\n    t.field(\"bigRedButton\", {\n      type: \"String\",\n\n      async resolve(_parent, _args, ctx) {\n        const {\n          count\n        } = await ctx.db.ppl.deleteMany({});\n        return `${count} user(s) destroyed. Thanos will be proud.`;\n      }\n\n    });\n    t.crud.createOnePpl();\n    t.crud.deleteOnePpl();\n    t.crud.deleteManyPpl();\n    t.crud.updateOnePpl();\n    t.crud.updateManyPpl();\n    t.field(\"removeAllProducts\", {\n      type: \"String\",\n\n      async resolve(_parent, _args, ctx) {\n        try {\n          const {\n            count\n          } = await ctx.db.product.deleteMany({});\n          return `${count} product(s) destroyed.`;\n        } catch (e) {\n          throw new Error(e);\n        }\n      }\n\n    }); // t.field(\"removeManyProducts\", {\n    //   type: \"String\",\n    //   args: {\n    //     data: arg({Product[]})\n    //   },\n    //   async resolve(_parent, _args, ctx) {\n    //     try {\n    //       const { count } = await ctx.db.product.deleteMany({});\n    //       return `${count} product(s) destroyed.`;\n    //     } catch (e) {\n    //       throw  new Error(e)\n    //     }\n    //   },\n    // });\n\n    t.field('removeProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: stringArg()\n      },\n\n      // @ts-ignore\n      resolve(parent, {\n        id\n      }, ctx) {\n        try {\n          return ctx.db.product.delete({\n            where: {\n              id: id\n            }\n          });\n        } catch (e) {\n          throw new Error(e);\n        }\n      }\n\n    });\n    t.field('updateProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: idArg(),\n        name: stringArg()\n      },\n\n      // @ts-ignore\n      resolve(parent, {\n        id,\n        name\n      }, ctx) {\n        try {\n          return ctx.db.product.update({\n            where: {\n              id: id\n            },\n            data: {\n              name: name\n            }\n          });\n        } catch (e) {\n          throw new Error(e);\n        }\n      }\n\n    });\n    t.field('createNewOneProduct', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        name: stringArg()\n      },\n\n      // @ts-ignore\n      resolve(parent, {\n        name\n      }, ctx) {\n        try {\n          return ctx.db.product.create({\n            data: {\n              name: name\n            }\n          });\n        } catch (e) {\n          throw new Error(e);\n        }\n      }\n\n    });\n    t.crud.createOneProduct();\n    t.crud.deleteOneProduct();\n    t.crud.deleteManyProduct();\n    t.crud.updateOneProduct();\n    t.crud.updateManyProduct();\n  }\n\n}); // schema.mutationType({\n//   definition(t) {\n//     t.field(\"bigRedButton\", {\n//       type: \"String\",\n//       async resolve(_parent, _args, ctx) {\n//         const { count } = await ctx.db.ppl.deleteMany({});\n//         return `${count} user(s) destroyed. Thanos will be proud.`;\n//       },\n//     });\n//\n//     t.crud.createOnePpl();\n//     t.crud.deleteOnePpl();\n//     t.crud.deleteManyPpl();\n//     t.crud.updateOnePpl();\n//     t.crud.updateManyPpl();\n//   },\n// });","map":null,"metadata":{},"sourceType":"module"}