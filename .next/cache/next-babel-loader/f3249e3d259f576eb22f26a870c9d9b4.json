{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.parseRelativeUrl = parseRelativeUrl;\nconst DUMMY_BASE = new URL('http://n');\n/**\n* Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n* (e.g. `./hello`) then at least base must be.\n* Absolute urls are rejected.\n*/\n\nfunction parseRelativeUrl(url, base) {\n  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE;\n  const {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href,\n    origin\n  } = new URL(url, resolvedBase);\n\n  if (origin !== DUMMY_BASE.origin) {\n    throw new Error('invariant: invalid relative URL');\n  }\n\n  return {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href: href.slice(DUMMY_BASE.origin.length)\n  };\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/parse-relative-url.ts"],"names":["DUMMY_BASE","resolvedBase","base","origin","href"],"mappings":";;;;AAAA,MAAMA,UAAU,GAAG,IAAA,GAAA,CAAnB,UAAmB,CAAnB;AAEA;;;;;;AAKO,SAAA,gBAAA,CAAA,GAAA,EAAA,IAAA,EAAsD;AAC3D,QAAMC,YAAY,GAAGC,IAAI,GAAG,IAAA,GAAA,CAAA,IAAA,EAAH,UAAG,CAAH,GAAzB,UAAA;AACA,QAAM;AAAA,IAAA,QAAA;AAAA,IAAA,YAAA;AAAA,IAAA,MAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA;AAAA,MAAyD,IAAA,GAAA,CAAA,GAAA,EAA/D,YAA+D,CAA/D;;AAIA,MAAIC,MAAM,KAAKH,UAAU,CAAzB,MAAA,EAAkC;AAChC,UAAM,IAAA,KAAA,CAAN,iCAAM,CAAN;AAEF;;AAAA,SAAO;AAAA,IAAA,QAAA;AAAA,IAAA,YAAA;AAAA,IAAA,MAAA;AAAA,IAAA,IAAA;AAKLI,IAAAA,IAAI,EAAEA,IAAI,CAAJA,KAAAA,CAAWJ,UAAU,CAAVA,MAAAA,CALnB,MAKQI;AALD,GAAP;AAOD","sourcesContent":["const DUMMY_BASE = new URL('http://n')\n\n/**\n * Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative\n * (e.g. `./hello`) then at least base must be.\n * Absolute urls are rejected.\n */\nexport function parseRelativeUrl(url: string, base?: string) {\n  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE\n  const { pathname, searchParams, search, hash, href, origin } = new URL(\n    url,\n    resolvedBase\n  )\n  if (origin !== DUMMY_BASE.origin) {\n    throw new Error('invariant: invalid relative URL')\n  }\n  return {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href: href.slice(DUMMY_BASE.origin.length),\n  }\n}\n"]},"metadata":{},"sourceType":"script"}