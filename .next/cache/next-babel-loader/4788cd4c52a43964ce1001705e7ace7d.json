{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/create.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createNewOneProduct($name: String!) {\\n        createNewOneProduct(name: $name) {\\n            id\\n            name\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query product($queryStr: String!) {\\n        product(queryStr: $queryStr) {\\n            id\\n            name\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Box, Button, Card, CardContent, CircularProgress, Grid, MenuItem, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object, string } from 'yup';\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { Select } from 'formik-material-ui';\nimport { gql } from \"@apollo/client\";\nimport client from \"../apollo\";\nimport { debug } from \"@prisma/client/runtime\";\n\nvar sleep = function sleep(time) {\n  return new Promise(function (acc) {\n    return setTimeout(acc, time);\n  });\n};\n\nvar DETAIL_PRODUCT = gql(_templateObject());\nvar CREATE_PRODUCT = gql(_templateObject2());\nexport default function CreateProduct() {\n  return __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, __jsx(FormikStepper, {\n    initialValues: {\n      name: '',\n      brand: 'Other',\n      isAvailable: false,\n      money: 0,\n      description: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return sleep(2000);\n\n              case 2:\n                console.log('values', values);\n                _context.prev = 3;\n                _context.next = 6;\n                return client.query({\n                  query: CREATE_PRODUCT,\n                  variables: {\n                    name: values.name\n                  }\n                });\n\n              case 6:\n                data = _context.sent;\n                debug();\n                console.log('dataaaa ne-> ', data);\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](3);\n                throw new Error(_context.t0);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 11]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(FormikStep, {\n    label: \"Data Info\",\n    validationSchema: object({\n      name: string().required().min(3).max(100)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"name\",\n    component: TextField,\n    label: \"Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, __jsx(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, __jsx(Field, {\n    name: \"brand\",\n    component: Select,\n    label: \"Brand\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, __jsx(MenuItem, {\n    value: \"Nike\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }, \"Nike\"), __jsx(MenuItem, {\n    value: \"Adidas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }, \"Adidas\"), __jsx(MenuItem, {\n    value: \"Puma\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }, \"Puma\"), __jsx(MenuItem, {\n    value: \"Gucci\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }\n  }, \"Gucci\"), __jsx(MenuItem, {\n    value: \"Dior\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }\n  }, \"Dior\"), __jsx(MenuItem, {\n    value: \"Nana\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, \"Nana\"), __jsx(MenuItem, {\n    defaultChecked: true,\n    value: \"Other\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }, \"Other\")))), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    name: \"isAvailable\",\n    type: \"checkbox\",\n    component: CheckboxWithLabel,\n    Label: {\n      label: 'Is product still available?'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"Price\",\n    validationSchema: object({\n      money: mixed().when('isAvailable', {\n        is: true,\n        then: number().required().min(0, 'The min-price of product is 0 eur'),\n        otherwise: number().required()\n      })\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"money\",\n    type: \"number\",\n    component: TextField,\n    label: \"All the money I have\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"More Info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"description\",\n    component: TextField,\n    label: \"Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }))))));\n}\n_c = CreateProduct;\nexport function FormikStep(_ref2) {\n  var children = _ref2.children;\n  return __jsx(React.Fragment, null, children);\n}\n_c2 = FormikStep;\nexport function FormikStepper(_ref3) {\n  _s();\n\n  var _this = this;\n\n  var children = _ref3.children,\n      props = _objectWithoutProperties(_ref3, [\"children\"]);\n\n  var childrenArray = React.Children.toArray(children);\n\n  var _useState = useState(0),\n      step = _useState[0],\n      setStep = _useState[1];\n\n  var currentChild = childrenArray[step];\n\n  var _useState2 = useState(false),\n      completed = _useState2[0],\n      setCompleted = _useState2[1];\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return __jsx(Formik, _extends({}, props, {\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values, helpers) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!isLastStep()) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 3;\n                return props.onSubmit(values, helpers);\n\n              case 3:\n                setCompleted(true);\n                _context2.next = 7;\n                break;\n\n              case 6:\n                setStep(function (s) {\n                  return s + 1;\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }), function (_ref5) {\n    var isSubmitting = _ref5.isSubmitting;\n    return __jsx(Form, {\n      autoComplete: \"off\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }, __jsx(Stepper, {\n      alternativeLabel: true,\n      activeStep: step,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }, childrenArray.map(function (child, index) {\n      return __jsx(Step, {\n        key: child.props.label,\n        completed: step > index || completed,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }\n      }, __jsx(StepLabel, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }\n      }, child.props.label));\n    })), currentChild, __jsx(Grid, {\n      container: true,\n      spacing: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }, step > 0 ? __jsx(Grid, {\n      item: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }\n    }, __jsx(Button, {\n      disabled: isSubmitting,\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: function onClick() {\n        return setStep(function (s) {\n          return s - 1;\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, \"Back\")) : null, __jsx(Grid, {\n      item: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      startIcon: isSubmitting ? __jsx(CircularProgress, {\n        size: \"1rem\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 43\n        }\n      }) : null,\n      disabled: isSubmitting,\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }\n    }, isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'))));\n  });\n}\n\n_s(FormikStepper, \"ofStvXvE4s5zSVpZTDgv2Qwx0Xo=\");\n\n_c3 = FormikStepper;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CreateProduct\");\n$RefreshReg$(_c2, \"FormikStep\");\n$RefreshReg$(_c3, \"FormikStepper\");","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/create.tsx"],"names":["Box","Button","Card","CardContent","CircularProgress","Grid","MenuItem","Step","StepLabel","Stepper","Field","Form","Formik","CheckboxWithLabel","TextField","React","useState","mixed","number","object","string","FormGroup","Select","gql","client","debug","sleep","time","Promise","acc","setTimeout","DETAIL_PRODUCT","CREATE_PRODUCT","CreateProduct","name","brand","isAvailable","money","description","values","console","log","query","variables","data","Error","required","min","max","label","when","is","then","otherwise","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","step","setStep","currentChild","completed","setCompleted","isLastStep","length","validationSchema","helpers","onSubmit","s","isSubmitting","map","child","index"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CircularProgress,\n  Grid,\n  MenuItem,\n  Step,\n  StepLabel,\n  Stepper\n} from '@material-ui/core';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport {mixed, number, object, string} from 'yup';\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { Select } from 'formik-material-ui';\nimport {gql} from \"@apollo/client\";\nimport client from \"../apollo\";\nimport {debug} from \"@prisma/client/runtime\";\n\nconst sleep = (time) => new Promise((acc) => setTimeout(acc, time));\n\nconst DETAIL_PRODUCT = gql`\n    query product($queryStr: String!) {\n        product(queryStr: $queryStr) {\n            id\n            name\n        }\n    }\n`\n\nconst CREATE_PRODUCT = gql`\n    mutation createNewOneProduct($name: String!) {\n        createNewOneProduct(name: $name) {\n            id\n            name\n        }\n    }\n`\n\nexport default function CreateProduct() {\n  return (\n    <Card>\n      <CardContent>\n        <FormikStepper\n          initialValues={{\n            name: '',\n            brand: 'Other',\n            isAvailable: false,\n            money: 0,\n            description: '',\n          }}\n          onSubmit={async (values) => {\n            await sleep(2000);\n            console.log('values', values);\n            try {\n              const data = await client.query({\n                query: CREATE_PRODUCT,\n                variables: {\n                  name: values!.name\n                }\n              })\ndebug()\n              console.log('dataaaa ne-> ', data)\n            } catch (e) {\n              throw new Error(e)\n            }\n          }}\n        >\n          <FormikStep\n            label=\"Data Info\"\n            validationSchema={\n              object({\n                name: string().required().min(3).max(100),\n              })\n            }\n          >\n            <Box paddingBottom={2}>\n              <Field fullWidth name=\"name\" component={TextField} label=\"Name\" />\n            </Box>\n            <Box paddingBottom={2}>\n              <FormGroup>\n                <Field name=\"brand\" component={Select} label=\"Brand\">\n                  <MenuItem value=\"Nike\">Nike</MenuItem>\n                  <MenuItem value=\"Adidas\">Adidas</MenuItem>\n                  <MenuItem value=\"Puma\">Puma</MenuItem>\n                  <MenuItem value=\"Gucci\">Gucci</MenuItem>\n                  <MenuItem value=\"Dior\">Dior</MenuItem>\n                  <MenuItem value=\"Nana\">Nana</MenuItem>\n                  <MenuItem defaultChecked={true} value=\"Other\">Other</MenuItem>\n                </Field>\n              </FormGroup>\n            </Box>\n            <Box paddingBottom={2}>\n              <Field\n                name=\"isAvailable\"\n                type=\"checkbox\"\n                component={CheckboxWithLabel}\n                Label={{ label: 'Is product still available?' }}\n              />\n            </Box>\n          </FormikStep>\n          <FormikStep\n            label=\"Price\"\n            validationSchema={object({\n              money: mixed().when('isAvailable', {\n                is: true,\n                then: number()\n                  .required()\n                  .min(\n                    0,\n                    'The min-price of product is 0 eur'\n                  ),\n                otherwise: number().required(),\n              }),\n            })}\n          >\n            <Box paddingBottom={2}>\n              <Field\n                fullWidth\n                name=\"money\"\n                type=\"number\"\n                component={TextField}\n                label=\"All the money I have\"\n              />\n            </Box>\n          </FormikStep>\n          <FormikStep label=\"More Info\">\n            <Box paddingBottom={2}>\n              <Field fullWidth name=\"description\" component={TextField} label=\"Description\" />\n            </Box>\n          </FormikStep>\n        </FormikStepper>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport interface FormikStepProps\n  extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'> {\n  label: string;\n}\n\nexport function FormikStep({ children }: FormikStepProps) {\n  return <>{children}</>;\n}\n\nexport function FormikStepper({ children, ...props }: FormikConfig<FormikValues>) {\n  const childrenArray = React.Children.toArray(children) as React.ReactElement<FormikStepProps>[];\n  const [step, setStep] = useState(0);\n  const currentChild = childrenArray[step];\n  const [completed, setCompleted] = useState(false);\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return (\n    <Formik\n      {...props}\n      validationSchema={currentChild.props.validationSchema}\n      onSubmit={async (values, helpers) => {\n        if (isLastStep()) {\n          await props.onSubmit(values, helpers);\n          setCompleted(true);\n        } else {\n          setStep((s) => s + 1);\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <Stepper alternativeLabel activeStep={step}>\n            {childrenArray.map((child, index) => (\n              <Step key={child.props.label} completed={step > index || completed}>\n                <StepLabel>{child.props.label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n\n          {currentChild}\n\n          <Grid container spacing={2}>\n            {step > 0 ? (\n              <Grid item>\n                <Button\n                  disabled={isSubmitting}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => setStep((s) => s - 1)}\n                >\n                  Back\n                </Button>\n              </Grid>\n            ) : null}\n            <Grid item>\n              <Button\n                startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\n                disabled={isSubmitting}\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                {isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'}\n              </Button>\n            </Grid>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  );\n}"]},"metadata":{},"sourceType":"module"}