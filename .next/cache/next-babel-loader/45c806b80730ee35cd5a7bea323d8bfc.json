{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/detail.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\n\nvar StaticPropsDetail = function StaticPropsDetail() {\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, \"hahaaah\");\n};\n\n_c = StaticPropsDetail;\nexport default StaticPropsDetail; // export const getStaticPaths: GetStaticPaths = async () => {\n//     // Get the paths we want to pre-render based on users\n//     const paths = sampleUserData.map((user) => ({\n//         params: { id: user.id.toString() },\n//     }))\n//\n//     // We'll pre-render only these paths at build time.\n//     // { fallback: false } means other routes should 404.\n//     return { paths, fallback: false }\n// }\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n// export const getStaticProps: GetStaticProps = async ({ params }) => {\n//     try {\n//         console.log(111)\n//         const id = params?.id\n//         const item = sampleUserData.find((data) => data.id === Number(id))\n//         // By returning { props: item }, the StaticPropsDetail component\n//         // will receive `item` as a prop at build time\n//         return { props: { item } }\n//     } catch (err) {\n//         return { props: { errors: err.message } }\n//     }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"StaticPropsDetail\");","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/detail.tsx"],"names":["Layout","StaticPropsDetail"],"mappings":";;;;;AAGA,OAAOA,MAAP,MAAmB,sBAAnB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAG5B,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ;AAKH,CARD;;KAAMA,iB;AAUN,eAAeA,iBAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { GetStaticProps, GetStaticPaths } from 'next'\nimport ListDetail from \"../components/ListDetail\";\n\nimport Layout from \"../components/Layout\";\n\nconst StaticPropsDetail = () => {\n\n\n    return (\n        <Layout>\n            hahaaah\n        </Layout>\n    )\n}\n\nexport default StaticPropsDetail\n\n// export const getStaticPaths: GetStaticPaths = async () => {\n//     // Get the paths we want to pre-render based on users\n//     const paths = sampleUserData.map((user) => ({\n//         params: { id: user.id.toString() },\n//     }))\n//\n//     // We'll pre-render only these paths at build time.\n//     // { fallback: false } means other routes should 404.\n//     return { paths, fallback: false }\n// }\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n// export const getStaticProps: GetStaticProps = async ({ params }) => {\n//     try {\n//         console.log(111)\n//         const id = params?.id\n//         const item = sampleUserData.find((data) => data.id === Number(id))\n//         // By returning { props: item }, the StaticPropsDetail component\n//         // will receive `item` as a prop at build time\n//         return { props: { item } }\n//     } catch (err) {\n//         return { props: { errors: err.message } }\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}