{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from \"react\";\nimport useStyles from \"./style\";\nimport { Card, CardMedia, CardContent, Typography, CardActionArea, CardActions, Button } from \"@material-ui/core\";\nimport Loading from \"../../components/Loading\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport PaginationItem from \"@material-ui/lab/PaginationItem\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport Box from \"@material-ui/core/Box\";\nimport { PrismaClient } from \"@prisma/client\"; // import { request } from \"graphql-request\";\n\nimport useSWR from \"swr\";\nconst prisma2 = new PrismaClient();\nimport CustomModal from '../../components/Modal';\nimport Router from \"next/router\";\nimport LazyLoad from 'react-lazyload';\nconst take = \"9\"; // const API = \"http://localhost:3000/api/graphql\";\n// const fetcher = (query: any, skip: string, take: string) =>\n//   request(API, query, { skip, take });\n\nconst ALL_PRODUCTS2 =\n/* GraphQL */\n`\n  query allProducts($skip: String!, $take: String!) {\n    allProducts(skip: $skip, take: $take) {\n      id\n      name\n    }\n  }\n`;\nexport default function Products({\n  skip,\n  products,\n  numberPages\n}) {\n  const classes = useStyles();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: openEdit,\n    1: setOpenEdit\n  } = useState(false);\n  const {\n    0: activeProduct,\n    1: setActiveProduct\n  } = useState();\n  const {\n    data\n  } = useSWR([ALL_PRODUCTS2, skip, take], {\n    initialData: products\n  });\n  const loading = !data;\n  const router = useRouter();\n\n  if (router.isFallback || loading) {\n    return __jsx(Loading, null);\n  }\n\n  const handleOnclickDeleteBtn = async (product, e) => {\n    await handleOpen(e); // Active product. ...\n\n    await setActiveProduct(product);\n  };\n\n  const redirectRouting = async currentPage => {\n    await Router.replace(`/products/${currentPage}`, `/products/${currentPage}`, {\n      shallow: true\n    });\n  };\n\n  const handleOpen = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setOpen(true);\n  };\n\n  const handleClose = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setOpen(false);\n  };\n\n  const handleOpenOrCloseEdit = e => {\n    e.preventDefault();\n    setOpenEdit(!openEdit);\n  }; // @ts-ignore\n\n\n  let updatedProducts = [];\n  const typeOfUpdateProducts = typeof data;\n\n  if (typeOfUpdateProducts === \"object\") {\n    // @ts-ignore\n    updatedProducts = (data === null || data === void 0 ? void 0 : data.allProducts) || undefined;\n  }\n\n  return __jsx(\"div\", {\n    className: classes.wrapper\n  }, open && activeProduct && __jsx(CustomModal, {\n    handleOpen: handleOpen,\n    product: activeProduct,\n    handleClose: handleClose,\n    open: open,\n    redirectRouting: redirectRouting,\n    currentPage: router.query.page || 1,\n    isEdit: false // @ts-ignore\n    ,\n    products: productArray || products || []\n  }), openEdit ? __jsx(CustomModal, {\n    redirectRouting: redirectRouting,\n    product: activeProduct,\n    currentPage: router.query.page || 1,\n    handleClose: handleOpenOrCloseEdit,\n    handleOpen: handleOpenOrCloseEdit,\n    open: openEdit,\n    isEdit: true // @ts-ignore\n    ,\n    products: productArray || products || []\n  }) : null, __jsx(\"div\", {\n    className: classes.content__tittle\n  }, __jsx(\"div\", null, \"POPULAR PRODUCTS\")), __jsx(Box, {\n    className: classes.content__pagination\n  }, numberPages > 0 || !router.isFallback ? __jsx(Pagination, {\n    page: parseInt(router.query.page || \"1\"),\n    count: numberPages,\n    defaultPage: 1,\n    renderItem: item => __jsx(PaginationItem, _extends({\n      component: MaterialUiLink,\n      query: router.query || 1,\n      item: item\n    }, item))\n  }) : __jsx(Skeleton, {\n    variant: \"rect\",\n    width: \"30vw\",\n    height: \"28px\"\n  })), __jsx(\"div\", {\n    className: classes.content__items\n  }, updatedProducts ? updatedProducts.map((p, i) => {\n    return __jsx(Box, {\n      className: classes.lazyLoading\n    }, __jsx(LazyLoad, {\n      key: p.id,\n      height: 9,\n      offset: [-9, 9],\n      placeholder: __jsx(Loading, null)\n    }, __jsx(Link, {\n      href: \"/products/details/[id]\",\n      as: `/products/details/${p.id}`\n    }, __jsx(Card, {\n      key: i,\n      className: classes.content__item\n    }, __jsx(CardActionArea, null, __jsx(CardMedia, {\n      className: classes.item__media,\n      image: \"https://cdn.bike24.net/i/mb/d8/fa/b2/277893-00-d-557791.jpg\",\n      title: \"Contemplative Reptile\"\n    }), __jsx(CardContent, null, __jsx(Typography, {\n      gutterBottom: true,\n      variant: \"h5\",\n      component: \"h2\"\n    }, p.name), __jsx(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      component: \"p\"\n    }, \"Maximum impact cushioning. The brutal, repetitive, downward force of sport can wreak havoc on the body and on performance. Max Air cushioning is specifically engineered to handle these impacts and provide protection. Max Air is big air designed to take a pounding.\"), __jsx(Typography, {\n      className: classes.item__price\n    }, \"PRICE: 60.0 Euro\"))), __jsx(CardActions, {\n      className: classes.item__buttons\n    }, __jsx(Box, {\n      component: \"div\"\n    }, __jsx(Button, {\n      size: \"small\",\n      color: \"primary\",\n      className: classes.button__addToCart\n    }, \"Add To Cart\"), __jsx(Button, {\n      size: \"small\",\n      color: \"primary\",\n      onClick: handleOpenOrCloseEdit\n    }, \"EDIT\")), __jsx(Button, {\n      size: \"small\",\n      color: \"primary\",\n      onClick: e => handleOnclickDeleteBtn(p, e)\n    }, \"Delete\"))))));\n  }) : __jsx(Box, {\n    className: classes.content__skeleton\n  }, __jsx(Skeleton, {\n    variant: \"rect\",\n    width: \"28vw\",\n    height: \"720px\"\n  }), __jsx(\"div\", {\n    className: classes.wrapper__loading\n  }, __jsx(Loading, null)))));\n}\nexport const getStaticProps = async ctx => {\n  var _ctx$params;\n\n  const totalProducts = await prisma2.product.findMany();\n  const productsArray = Object.keys(totalProducts).map(k => totalProducts[parseInt(k)]);\n  const numberPages = Math.ceil(((productsArray === null || productsArray === void 0 ? void 0 : productsArray.length) || 0) / +take);\n  const pageQuery = (ctx === null || ctx === void 0 ? void 0 : (_ctx$params = ctx.params) === null || _ctx$params === void 0 ? void 0 : _ctx$params.page) || 1;\n  const skip = String((parseInt(pageQuery) - 1) * +take);\n  const productsOfPage = await prisma2.product.findMany({\n    skip: +skip,\n    take: +take\n  }); // const {  data } = await client.query({\n  //   query: ALL_PRODUCTS,\n  //   variables: {\n  //     skip: skip,\n  //     take: take\n  //   }\n  // })\n\n  const products = {\n    allProducts: productsOfPage\n  }; // Comment because we should not fetch api in getStaticProps, so we get data directly from db\n  // const products: Product[] = await fetcher(ALL_PRODUCTS2, skip as string, take as string);\n\n  return {\n    props: {\n      products,\n      numberPages,\n      skip\n    }\n  };\n};\nexport function MaterialUiLink(_ref) {\n  let {\n    item,\n    query\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"item\", \"query\"]);\n\n  // const router = useRouter();\n  // if ( !router.query.page)\n  //   return (\n  //     <Link href=\"/products\" as={`/products`}>\n  //       <a {...props}></a>\n  //     </Link>\n  //   );\n  return __jsx(Link, {\n    href: \"/products/[page]\",\n    as: `/products/${item.page}`\n  }, __jsx(\"a\", props));\n}","map":null,"metadata":{},"sourceType":"module"}