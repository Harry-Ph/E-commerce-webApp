{"ast":null,"code":"var _jsxFileName = \"/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/about.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Layout from '../components/Layout';\nimport { gql } from '@apollo/client';\nimport client from \"./apollo\";\nconst ALL_PRODUCTS = gql`\n    query allProducts($offset: Int, $limit: Int) {\n      allProducts(skip: $offset, take: $limit) {\n        id\n        name\n      }\n    }\n`;\n// @ts-ignore\nexport default function AboutPage({\n  loading,\n  data\n}) {\n  console.log('data--->', data);\n  return __jsx(Layout, {\n    title: \"About | Next.js + TypeScript Example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"About\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"This is the about page\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(Link, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }, \"Go home\"))));\n} // @ts-ignore\n\nexport async function getServerSideProps(context) {\n  console.log('context--->', context.req);\n  const {\n    loading,\n    data\n  } = await client.query({\n    query: ALL_PRODUCTS,\n    variables: {\n      skip: 0,\n      limit: 10\n    }\n  });\n  return {\n    props: {\n      loading,\n      data\n    }\n  };\n}\nconst ProductsListData = graphql(productInfo, {\n  props({\n    data: {\n      loading,\n      cursor,\n      allProducts,\n      fetchMore\n    }\n  }) {\n    return {\n      loading,\n      allProducts,\n      loadMoreEntries: () => {\n        return fetchMore({\n          variables: {\n            cursor: cursor\n          },\n          updateQuery: (previousResult, {\n            fetchMoreResult\n          }) => {\n            const previousEntry = previousResult.entry;\n            const newProducts = fetchMoreResult.allProducts;\n            return {\n              cursor: fetchMoreResult.cursor,\n              entry: {\n                allProducts: [...previousEntry.entry.allProducts, ...newProducts]\n              }\n            };\n          }\n        });\n      }\n    };\n  }\n\n})(ProductsList);","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/about.tsx"],"names":["Link","Layout","gql","client","ALL_PRODUCTS","AboutPage","loading","data","console","log","getServerSideProps","context","req","query","variables","skip","limit","props","ProductsListData","graphql","productInfo","cursor","allProducts","fetchMore","loadMoreEntries","updateQuery","previousResult","fetchMoreResult","previousEntry","entry","newProducts","ProductsList"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAGA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,YAAY,GAAGF,GAAI;;;;;;;CAAzB;AAYA;AACA,eAAe,SAASG,SAAT,CAAmB;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAnB,EAAoC;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;AACA,SAAO,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,sCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADG,EAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFG,EAGH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CADJ,CAHG,CAAP;AASH,C,CAED;;AACA,OAAO,eAAeG,kBAAf,CAAkCC,OAAlC,EAA2C;AAC9CH,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,OAAO,CAACC,GAAnC;AACA,QAAM;AAAEN,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoB,MAAMJ,MAAM,CAACU,KAAP,CAAa;AACzCA,IAAAA,KAAK,EAAET,YADkC;AAEzCU,IAAAA,SAAS,EAAE;AACPC,MAAAA,IAAI,EAAE,CADC;AAEPC,MAAAA,KAAK,EAAE;AAFA;AAF8B,GAAb,CAAhC;AAOA,SAAO;AAACC,IAAAA,KAAK,EAAE;AAAEX,MAAAA,OAAF;AAAWC,MAAAA;AAAX;AAAR,GAAP;AACH;AAED,MAAMW,gBAAgB,GAAGC,OAAO,CAACC,WAAD,EAAc;AAC1CH,EAAAA,KAAK,CAAC;AAAEV,IAAAA,IAAI,EAAE;AAAED,MAAAA,OAAF;AAAWe,MAAAA,MAAX;AAAmBC,MAAAA,WAAnB;AAAgCC,MAAAA;AAAhC;AAAR,GAAD,EAAwD;AACzD,WAAO;AACHjB,MAAAA,OADG;AAEHgB,MAAAA,WAFG;AAGHE,MAAAA,eAAe,EAAE,MAAM;AACnB,eAAOD,SAAS,CAAC;AACbT,UAAAA,SAAS,EAAE;AACPO,YAAAA,MAAM,EAAEA;AADD,WADE;AAIbI,UAAAA,WAAW,EAAE,CAACC,cAAD,EAAiB;AAAEC,YAAAA;AAAF,WAAjB,KAAyC;AAClD,kBAAMC,aAAa,GAAGF,cAAc,CAACG,KAArC;AACA,kBAAMC,WAAW,GAAGH,eAAe,CAACL,WAApC;AACA,mBAAO;AACHD,cAAAA,MAAM,EAAEM,eAAe,CAACN,MADrB;AAEHQ,cAAAA,KAAK,EAAE;AACHP,gBAAAA,WAAW,EAAE,CAAC,GAAGM,aAAa,CAACC,KAAd,CAAoBP,WAAxB,EAAqC,GAAGQ,WAAxC;AADV;AAFJ,aAAP;AAMH;AAbY,SAAD,CAAhB;AAeH;AAnBE,KAAP;AAqBH;;AAvByC,CAAd,CAAP,CAwBtBC,YAxBsB,CAAzB","sourcesContent":["import Link from 'next/link'\nimport Layout from '../components/Layout'\nimport { gql } from '@apollo/client'\n\nimport {Product} from \"../interfaces\";\nimport client from \"./apollo\";\n\nconst ALL_PRODUCTS = gql`\n    query allProducts($offset: Int, $limit: Int) {\n      allProducts(skip: $offset, take: $limit) {\n        id\n        name\n      }\n    }\n`\n\nexport interface  IProducts {\n    products: Product[]\n}\n// @ts-ignore\nexport default function AboutPage({loading, data}) {\n    console.log('data--->', data)\n    return <Layout title=\"About | Next.js + TypeScript Example\">\n        <h1>About</h1>\n        <p>This is the about page</p>\n        <p>\n            <Link href=\"/\">\n                <a>Go home</a>\n            </Link>\n        </p>\n    </Layout>\n}\n\n// @ts-ignore\nexport async function getServerSideProps(context) {\n    console.log('context--->', context.req)\n    const { loading, data } = await client.query({\n        query: ALL_PRODUCTS,\n        variables: {\n            skip: 0,\n            limit: 10\n        }\n    })\n    return {props: { loading, data }}\n}\n\nconst ProductsListData = graphql(productInfo, {\n    props({ data: { loading, cursor, allProducts, fetchMore } }) {\n        return {\n            loading,\n            allProducts,\n            loadMoreEntries: () => {\n                return fetchMore({\n                    variables: {\n                        cursor: cursor,\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const previousEntry = previousResult.entry;\n                        const newProducts = fetchMoreResult.allProducts;\n                        return {\n                            cursor: fetchMoreResult.cursor,\n                            entry: {\n                                allProducts: [...previousEntry.entry.allProducts, ...newProducts],\n                            },\n                        };\n                    },\n                });\n            },\n        };\n    },\n})(ProductsList);\n"]},"metadata":{},"sourceType":"module"}