{"ast":null,"code":"import { schema, use } from \"nexus\";\nimport { prisma } from \"nexus-plugin-prisma\";\nimport { idArg, stringArg } from \"nexus/components/schema\";\nuse(prisma({\n  features: {\n    crud: true\n  }\n})); // use(\n//   prisma({\n//     client: { instance: new PrismaClient() },\n//   })\n// )\n\nschema.objectType({\n  name: \"Ppl\",\n\n  definition(t) {\n    t.model.id();\n    t.model.name();\n  }\n\n});\nschema.objectType({\n  name: \"Product\",\n\n  definition(t) {\n    t.model.id();\n    t.model.name();\n  }\n\n});\nschema.addToContext(_req => {\n  return {\n    customReq: _req\n  };\n});\nschema.queryType({\n  async definition(t) {\n    t.list.field(\"allUsers\", {\n      type: \"Ppl\",\n\n      resolve(_parent, _args, ctx) {\n        return ctx.db.ppl.findMany({});\n      }\n\n    });\n    t.crud.ppl();\n    t.crud.ppls();\n    t.list.field(\"allProducts\", {\n      type: \"Product\",\n      args: {\n        skip: schema.stringArg({\n          nullable: true\n        }),\n        take: schema.stringArg({\n          nullable: true\n        })\n      },\n\n      resolve(_parent, _args, ctx) {\n        console.log(_args.skip, _args.take);\n        console.log(333);\n        return ctx.db.product.findMany({\n          skip: parseInt(_args === null || _args === void 0 ? void 0 : _args.skip),\n          take: parseInt(_args === null || _args === void 0 ? void 0 : _args.take)\n        });\n      }\n\n    });\n    t.list.field(\"product\", {\n      type: \"Product\",\n      args: {\n        queryStr: schema.stringArg({\n          nullable: true\n        })\n      },\n      resolve: async (_parent, _args, ctx) => {\n        try {\n          const product = await ctx.db.product.findMany({\n            where: {\n              OR: [{\n                id: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }, {\n                name: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }]\n            }\n          }); // const product = t.crud.product(_args?.id!.toString() as ProductWhereUniqueInput);\n\n          return product;\n        } catch (error) {\n          throw new Error(error);\n        }\n      }\n    }); // t.crud.product();\n    // t.crud.products();\n  }\n\n});\nschema.mutationType({\n  definition(t) {\n    t.field(\"bigRedButton\", {\n      type: \"String\",\n\n      async resolve(_parent, _args, ctx) {\n        const {\n          count\n        } = await ctx.db.ppl.deleteMany({});\n        return `${count} user(s) destroyed. Thanos will be proud.`;\n      }\n\n    });\n    t.crud.createOnePpl();\n    t.crud.deleteOnePpl();\n    t.crud.deleteManyPpl();\n    t.crud.updateOnePpl();\n    t.crud.updateManyPpl();\n    t.field(\"productMutation\", {\n      type: \"String\",\n\n      async resolve(_parent, _args, ctx) {\n        const {\n          count\n        } = await ctx.db.product.deleteMany({});\n        return `${count} user(s) destroyed. Thanos will be proud.`;\n      }\n\n    });\n    t.field('removeProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: idArg()\n      },\n\n      resolve(parent, {\n        id\n      }, ctx) {\n        return ctx.db.product.delete({\n          where: {\n            id: id\n          }\n        });\n      }\n\n    });\n    t.field('updateProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: idArg(),\n        name: stringArg()\n      },\n\n      resolve(parent, {\n        id,\n        name\n      }, ctx) {\n        return ctx.db.product.update({\n          where: {\n            id: id\n          },\n          data: {\n            name\n          }\n        });\n      }\n\n    });\n    t.field('createNewOneProduct', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        name: stringArg()\n      },\n\n      resolve(parent, {\n        name\n      }, ctx) {\n        return ctx.db.product.create({\n          data: {\n            name\n          }\n        });\n      }\n\n    });\n    t.crud.createOneProduct();\n    t.crud.deleteOneProduct();\n    t.crud.deleteManyProduct();\n    t.crud.updateOneProduct();\n    t.crud.updateManyProduct();\n  }\n\n}); // schema.mutationType({\n//   definition(t) {\n//     t.field(\"bigRedButton\", {\n//       type: \"String\",\n//       async resolve(_parent, _args, ctx) {\n//         const { count } = await ctx.db.ppl.deleteMany({});\n//         return `${count} user(s) destroyed. Thanos will be proud.`;\n//       },\n//     });\n//\n//     t.crud.createOnePpl();\n//     t.crud.deleteOnePpl();\n//     t.crud.deleteManyPpl();\n//     t.crud.updateOnePpl();\n//     t.crud.updateManyPpl();\n//   },\n// });","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/graphql/schema.ts"],"names":["schema","use","prisma","idArg","stringArg","features","crud","objectType","name","definition","t","model","id","addToContext","_req","customReq","queryType","list","field","type","resolve","_parent","_args","ctx","db","ppl","findMany","ppls","args","skip","nullable","take","console","log","product","parseInt","queryStr","where","OR","error","Error","mutationType","count","deleteMany","createOnePpl","deleteOnePpl","deleteManyPpl","updateOnePpl","updateManyPpl","parent","delete","update","data","create","createOneProduct","deleteOneProduct","deleteManyProduct","updateOneProduct","updateManyProduct"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,GAAjB,QAA4B,OAA5B;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,yBAAjC;AAGAH,GAAG,CAACC,MAAM,CAAC;AAAEG,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR;AAAZ,CAAD,CAAP,CAAH,C,CAEA;AACA;AACA;AACA;AACA;;AAEAN,MAAM,CAACO,UAAP,CAAkB;AAChBC,EAAAA,IAAI,EAAE,KADU;;AAEhBC,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACC,KAAF,CAAQC,EAAR;AACAF,IAAAA,CAAC,CAACC,KAAF,CAAQH,IAAR;AACD;;AALe,CAAlB;AAQAR,MAAM,CAACO,UAAP,CAAkB;AAChBC,EAAAA,IAAI,EAAE,SADU;;AAEhBC,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACC,KAAF,CAAQC,EAAR;AACAF,IAAAA,CAAC,CAACC,KAAF,CAAQH,IAAR;AACD;;AALe,CAAlB;AAQAR,MAAM,CAACa,YAAP,CAAoBC,IAAI,IAAI;AAC1B,SAAO;AACLC,IAAAA,SAAS,EAAED;AADN,GAAP;AAGD,CAJD;AAOAd,MAAM,CAACgB,SAAP,CAAiB;AACf,QAAMP,UAAN,CAAiBC,CAAjB,EAAoB;AAClBA,IAAAA,CAAC,CAACO,IAAF,CAAOC,KAAP,CAAa,UAAb,EAAyB;AACvBC,MAAAA,IAAI,EAAE,KADiB;;AAEvBC,MAAAA,OAAO,CAACC,OAAD,EAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AAC3B,eAAOA,GAAG,CAACC,EAAJ,CAAOC,GAAP,CAAWC,QAAX,CAAoB,EAApB,CAAP;AACD;;AAJsB,KAAzB;AAOAhB,IAAAA,CAAC,CAACJ,IAAF,CAAOmB,GAAP;AACAf,IAAAA,CAAC,CAACJ,IAAF,CAAOqB,IAAP;AAEAjB,IAAAA,CAAC,CAACO,IAAF,CAAOC,KAAP,CAAa,aAAb,EAA4B;AAC1BC,MAAAA,IAAI,EAAE,SADoB;AAE1BS,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAE7B,MAAM,CAACI,SAAP,CAAiB;AAAC0B,UAAAA,QAAQ,EAAE;AAAX,SAAjB,CADF;AAEJC,QAAAA,IAAI,EAAE/B,MAAM,CAACI,SAAP,CAAiB;AAAC0B,UAAAA,QAAQ,EAAE;AAAX,SAAjB;AAFF,OAFoB;;AAM1BV,MAAAA,OAAO,CAACC,OAAD,EAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AAC3BS,QAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACO,IAAlB,EAAwBP,KAAK,CAACS,IAA9B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,eAAOV,GAAG,CAACC,EAAJ,CAAOU,OAAP,CAAeR,QAAf,CAAwB;AAC7BG,UAAAA,IAAI,EAAEM,QAAQ,CAACb,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEO,IAAR,CADe;AAE7BE,UAAAA,IAAI,EAAEI,QAAQ,CAACb,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAES,IAAR;AAFe,SAAxB,CAAP;AAID;;AAbyB,KAA5B;AAgBArB,IAAAA,CAAC,CAACO,IAAF,CAAOC,KAAP,CAAa,SAAb,EAAwB;AACtBC,MAAAA,IAAI,EAAE,SADgB;AAEtBS,MAAAA,IAAI,EAAE;AAAEQ,QAAAA,QAAQ,EAAEpC,MAAM,CAACI,SAAP,CAAiB;AAAC0B,UAAAA,QAAQ,EAAE;AAAX,SAAjB;AAAZ,OAFgB;AAGtBV,MAAAA,OAAO,EAAE,OAAMC,OAAN,EAAeC,KAAf,EAAsBC,GAAtB,KAA8B;AACrC,YAAI;AACF,gBAAMW,OAAO,GAAG,MAAMX,GAAG,CAACC,EAAJ,CAAOU,OAAP,CAAeR,QAAf,CAAwB;AAC5CW,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,CACF;AAAE1B,gBAAAA,EAAE,EAAEU,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEc;AAAb,eADE,EAEF;AAAE5B,gBAAAA,IAAI,EAAEc,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEc;AAAf,eAFE;AADC;AADqC,WAAxB,CAAtB,CADE,CASF;;AACA,iBAAOF,OAAP;AACD,SAXD,CAWE,OAAOK,KAAP,EAAc;AACd,gBAAO,IAAIC,KAAJ,CAAUD,KAAV,CAAP;AACD;AAEJ;AAnBuB,KAAxB,EA3BkB,CAiDlB;AACA;AACD;;AApDc,CAAjB;AAuDAvC,MAAM,CAACyC,YAAP,CAAoB;AAClBhC,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACQ,KAAF,CAAQ,cAAR,EAAwB;AACtBC,MAAAA,IAAI,EAAE,QADgB;;AAEtB,YAAMC,OAAN,CAAcC,OAAd,EAAuBC,KAAvB,EAA8BC,GAA9B,EAAmC;AACjC,cAAM;AAAEmB,UAAAA;AAAF,YAAY,MAAMnB,GAAG,CAACC,EAAJ,CAAOC,GAAP,CAAWkB,UAAX,CAAsB,EAAtB,CAAxB;AACA,eAAQ,GAAED,KAAM,2CAAhB;AACD;;AALqB,KAAxB;AAQAhC,IAAAA,CAAC,CAACJ,IAAF,CAAOsC,YAAP;AACAlC,IAAAA,CAAC,CAACJ,IAAF,CAAOuC,YAAP;AACAnC,IAAAA,CAAC,CAACJ,IAAF,CAAOwC,aAAP;AACApC,IAAAA,CAAC,CAACJ,IAAF,CAAOyC,YAAP;AACArC,IAAAA,CAAC,CAACJ,IAAF,CAAO0C,aAAP;AAEAtC,IAAAA,CAAC,CAACQ,KAAF,CAAQ,iBAAR,EAA2B;AACzBC,MAAAA,IAAI,EAAE,QADmB;;AAEzB,YAAMC,OAAN,CAAcC,OAAd,EAAuBC,KAAvB,EAA8BC,GAA9B,EAAmC;AACjC,cAAM;AAAEmB,UAAAA;AAAF,YAAY,MAAMnB,GAAG,CAACC,EAAJ,CAAOU,OAAP,CAAeS,UAAf,CAA0B,EAA1B,CAAxB;AACA,eAAQ,GAAED,KAAM,2CAAhB;AACD;;AALwB,KAA3B;AAQAhC,IAAAA,CAAC,CAACQ,KAAF,CAAQ,mBAAR,EAA6B;AAC3BC,MAAAA,IAAI,EAAE,SADqB;AAE3BW,MAAAA,QAAQ,EAAE,IAFiB;AAG3BF,MAAAA,IAAI,EAAE;AACJhB,QAAAA,EAAE,EAAET,KAAK;AADL,OAHqB;;AAM3BiB,MAAAA,OAAO,CAAC6B,MAAD,EAAS;AAACrC,QAAAA;AAAD,OAAT,EAAeW,GAAf,EAAoB;AACzB,eAAOA,GAAG,CAACC,EAAJ,CAAOU,OAAP,CAAegB,MAAf,CAAsB;AAC3Bb,UAAAA,KAAK,EAAE;AACLzB,YAAAA,EAAE,EAAEA;AADC;AADoB,SAAtB,CAAP;AAKD;;AAZ0B,KAA7B;AAeAF,IAAAA,CAAC,CAACQ,KAAF,CAAQ,mBAAR,EAA6B;AAC3BC,MAAAA,IAAI,EAAE,SADqB;AAE3BW,MAAAA,QAAQ,EAAE,IAFiB;AAG3BF,MAAAA,IAAI,EAAE;AACJhB,QAAAA,EAAE,EAAET,KAAK,EADL;AAEJK,QAAAA,IAAI,EAAEJ,SAAS;AAFX,OAHqB;;AAO3BgB,MAAAA,OAAO,CAAC6B,MAAD,EAAS;AAACrC,QAAAA,EAAD;AAAKJ,QAAAA;AAAL,OAAT,EAAqBe,GAArB,EAA0B;AAC/B,eAAOA,GAAG,CAACC,EAAJ,CAAOU,OAAP,CAAeiB,MAAf,CAAsB;AAC3Bd,UAAAA,KAAK,EAAE;AACLzB,YAAAA,EAAE,EAAEA;AADC,WADoB;AAI3BwC,UAAAA,IAAI,EAAE;AACJ5C,YAAAA;AADI;AAJqB,SAAtB,CAAP;AAQD;;AAhB0B,KAA7B;AAmBAE,IAAAA,CAAC,CAACQ,KAAF,CAAQ,qBAAR,EAA+B;AAC7BC,MAAAA,IAAI,EAAE,SADuB;AAE7BW,MAAAA,QAAQ,EAAE,IAFmB;AAG7BF,MAAAA,IAAI,EAAE;AACJpB,QAAAA,IAAI,EAAEJ,SAAS;AADX,OAHuB;;AAM7BgB,MAAAA,OAAO,CAAC6B,MAAD,EAAS;AAACzC,QAAAA;AAAD,OAAT,EAAiBe,GAAjB,EAAsB;AAC3B,eAAOA,GAAG,CAACC,EAAJ,CAAOU,OAAP,CAAemB,MAAf,CAAsB;AAC3BD,UAAAA,IAAI,EAAE;AACJ5C,YAAAA;AADI;AADqB,SAAtB,CAAP;AAKD;;AAZ4B,KAA/B;AAeAE,IAAAA,CAAC,CAACJ,IAAF,CAAOgD,gBAAP;AACA5C,IAAAA,CAAC,CAACJ,IAAF,CAAOiD,gBAAP;AACA7C,IAAAA,CAAC,CAACJ,IAAF,CAAOkD,iBAAP;AACA9C,IAAAA,CAAC,CAACJ,IAAF,CAAOmD,gBAAP;AACA/C,IAAAA,CAAC,CAACJ,IAAF,CAAOoD,iBAAP;AACD;;AA9EiB,CAApB,E,CAiFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { schema, use } from \"nexus\";\nimport { prisma } from \"nexus-plugin-prisma\";\nimport { idArg, stringArg } from \"nexus/components/schema\";\nimport { PrismaClient } from 'nexus-plugin-prisma/client'\n\nuse(prisma({ features: { crud: true } }));\n\n// use(\n//   prisma({\n//     client: { instance: new PrismaClient() },\n//   })\n// )\n\nschema.objectType({\n  name: \"Ppl\",\n  definition(t) {\n    t.model.id();\n    t.model.name();\n  },\n});\n\nschema.objectType({\n  name: \"Product\",\n  definition(t) {\n    t.model.id();\n    t.model.name();\n  },\n});\n\nschema.addToContext(_req => {\n  return {\n    customReq: _req,\n  }\n})\n\n\nschema.queryType({\n  async definition(t) {\n    t.list.field(\"allUsers\", {\n      type: \"Ppl\",\n      resolve(_parent, _args, ctx) {\n        return ctx.db.ppl.findMany({});\n      },\n    });\n\n    t.crud.ppl();\n    t.crud.ppls();\n\n    t.list.field(\"allProducts\", {\n      type: \"Product\",\n      args: {\n        skip: schema.stringArg({nullable: true}),\n        take: schema.stringArg({nullable: true}),\n      },\n      resolve(_parent, _args, ctx) {\n        console.log(_args.skip, _args.take)\n        console.log(333)\n        return ctx.db.product.findMany({\n          skip: parseInt(_args?.skip!),\n          take: parseInt(_args?.take!),\n        });\n      },\n    });\n\n    t.list.field(\"product\", {\n      type: \"Product\",\n      args: { queryStr: schema.stringArg({nullable: true})},\n      resolve: async(_parent, _args, ctx) => {\n        try {\n          const product = await ctx.db.product.findMany({\n            where: {\n              OR: [\n                { id: _args?.queryStr! },\n                { name: _args?.queryStr! },\n              ],\n            },\n          });\n          // const product = t.crud.product(_args?.id!.toString() as ProductWhereUniqueInput);\n          return product;\n        } catch (error) {\n          throw  new Error(error)\n        }\n\n    }\n  });\n\n    // t.crud.product();\n    // t.crud.products();\n  },\n});\n\nschema.mutationType({\n  definition(t) {\n    t.field(\"bigRedButton\", {\n      type: \"String\",\n      async resolve(_parent, _args, ctx) {\n        const { count } = await ctx.db.ppl.deleteMany({});\n        return `${count} user(s) destroyed. Thanos will be proud.`;\n      },\n    });\n\n    t.crud.createOnePpl();\n    t.crud.deleteOnePpl();\n    t.crud.deleteManyPpl();\n    t.crud.updateOnePpl();\n    t.crud.updateManyPpl();\n\n    t.field(\"productMutation\", {\n      type: \"String\",\n      async resolve(_parent, _args, ctx) {\n        const { count } = await ctx.db.product.deleteMany({});\n        return `${count} user(s) destroyed. Thanos will be proud.`;\n      },\n    });\n\n    t.field('removeProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: idArg(),\n      },\n      resolve(parent, {id}, ctx) {\n        return ctx.db.product.delete({\n          where: {\n            id: id!\n          }\n        })\n      }\n    })\n\n    t.field('updateProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: idArg(),\n        name: stringArg()\n      },\n      resolve(parent, {id, name}, ctx) {\n        return ctx.db.product.update({\n          where: {\n            id: id!\n          },\n          data: {\n            name\n          }\n        })\n      }\n    })\n\n    t.field('createNewOneProduct', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        name: stringArg(),\n      },\n      resolve(parent, {name}, ctx) {\n        return ctx.db.product.create({\n          data: {\n            name\n          }\n        })\n      }\n    })\n\n    t.crud.createOneProduct();\n    t.crud.deleteOneProduct();\n    t.crud.deleteManyProduct();\n    t.crud.updateOneProduct();\n    t.crud.updateManyProduct();\n  },\n});\n\n// schema.mutationType({\n//   definition(t) {\n//     t.field(\"bigRedButton\", {\n//       type: \"String\",\n//       async resolve(_parent, _args, ctx) {\n//         const { count } = await ctx.db.ppl.deleteMany({});\n//         return `${count} user(s) destroyed. Thanos will be proud.`;\n//       },\n//     });\n//\n//     t.crud.createOnePpl();\n//     t.crud.deleteOnePpl();\n//     t.crud.deleteManyPpl();\n//     t.crud.updateOnePpl();\n//     t.crud.updateManyPpl();\n//   },\n// });\n"]},"metadata":{},"sourceType":"module"}