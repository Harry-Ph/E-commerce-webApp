{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const AllUsersDocument = gql`\n    query AllUsers {\n  allUsers {\n    id\n    name\n  }\n}\n    `;\nexport function useAllUsersQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: AllUsersDocument\n  }, options));\n}\n;\nexport const AllProductsDocument = gql`\n    query AllProducts {\n  allProducts {\n    id\n    name\n  }\n}\n    `;\nexport function useAllProductsQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: AllProductsDocument\n  }, options));\n}\n;","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/generated/graphql.tsx"],"names":["gql","Urql","AllUsersDocument","useAllUsersQuery","options","useQuery","query","AllProductsDocument","useAllProductsQuery"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAyOA,OAAO,MAAMC,gBAAgB,GAAGF,GAAI;;;;;;;KAA7B;AASP,OAAO,SAASG,gBAAT,CAA0BC,OAAiE,GAAG,EAA9F,EAAkG;AACvG,SAAOH,IAAI,CAACI,QAAL;AAA+BC,IAAAA,KAAK,EAAEJ;AAAtC,KAA2DE,OAA3D,EAAP;AACD;AAAA;AACD,OAAO,MAAMG,mBAAmB,GAAGP,GAAI;;;;;;;KAAhC;AASP,OAAO,SAASQ,mBAAT,CAA6BJ,OAAoE,GAAG,EAApG,EAAwG;AAC7G,SAAOH,IAAI,CAACI,QAAL;AAAkCC,IAAAA,KAAK,EAAEC;AAAzC,KAAiEH,OAAjE,EAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n  DateTime: any;\n  /** The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  Json: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  allUsers?: Maybe<Array<Ppl>>;\n  ppl?: Maybe<Ppl>;\n  ppls: Array<Ppl>;\n  allProducts?: Maybe<Array<Product>>;\n  product?: Maybe<Array<Product>>;\n  products: Array<Product>;\n};\n\n\nexport type QueryPplArgs = {\n  where: PplWhereUniqueInput;\n};\n\n\nexport type QueryPplsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  before?: Maybe<PplWhereUniqueInput>;\n  after?: Maybe<PplWhereUniqueInput>;\n};\n\n\nexport type QueryProductArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryProductsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  before?: Maybe<ProductWhereUniqueInput>;\n  after?: Maybe<ProductWhereUniqueInput>;\n};\n\nexport type Ppl = {\n  __typename?: 'Ppl';\n  id: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type PplWhereUniqueInput = {\n  id?: Maybe<Scalars['String']>;\n};\n\nexport type Product = {\n  __typename?: 'Product';\n  id: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type ProductWhereUniqueInput = {\n  id?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  bigRedButton?: Maybe<Scalars['String']>;\n  createOnePpl: Ppl;\n  deleteOnePpl?: Maybe<Ppl>;\n  deleteManyPpl: BatchPayload;\n  updateOnePpl?: Maybe<Ppl>;\n  updateManyPpl: BatchPayload;\n  productMutation?: Maybe<Scalars['String']>;\n  createOneProduct: Product;\n  deleteOneProduct?: Maybe<Product>;\n  deleteManyProduct: BatchPayload;\n  updateOneProduct?: Maybe<Product>;\n  updateManyProduct: BatchPayload;\n};\n\n\nexport type MutationCreateOnePplArgs = {\n  data: PplCreateInput;\n};\n\n\nexport type MutationDeleteOnePplArgs = {\n  where: PplWhereUniqueInput;\n};\n\n\nexport type MutationDeleteManyPplArgs = {\n  where?: Maybe<PplWhereInput>;\n};\n\n\nexport type MutationUpdateOnePplArgs = {\n  data: PplUpdateInput;\n  where: PplWhereUniqueInput;\n};\n\n\nexport type MutationUpdateManyPplArgs = {\n  data: PplUpdateManyMutationInput;\n  where?: Maybe<PplWhereInput>;\n};\n\n\nexport type MutationCreateOneProductArgs = {\n  data: ProductCreateInput;\n};\n\n\nexport type MutationDeleteOneProductArgs = {\n  where: ProductWhereUniqueInput;\n};\n\n\nexport type MutationDeleteManyProductArgs = {\n  where?: Maybe<ProductWhereInput>;\n};\n\n\nexport type MutationUpdateOneProductArgs = {\n  data: ProductUpdateInput;\n  where: ProductWhereUniqueInput;\n};\n\n\nexport type MutationUpdateManyProductArgs = {\n  data: ProductUpdateManyMutationInput;\n  where?: Maybe<ProductWhereInput>;\n};\n\nexport type PplCreateInput = {\n  id?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n};\n\nexport type PplWhereInput = {\n  id?: Maybe<StringFilter>;\n  name?: Maybe<StringFilter>;\n  AND?: Maybe<Array<PplWhereInput>>;\n  OR?: Maybe<Array<PplWhereInput>>;\n  NOT?: Maybe<Array<PplWhereInput>>;\n};\n\nexport type StringFilter = {\n  equals?: Maybe<Scalars['String']>;\n  not?: Maybe<Scalars['String']>;\n  in?: Maybe<Array<Scalars['String']>>;\n  notIn?: Maybe<Array<Scalars['String']>>;\n  lt?: Maybe<Scalars['String']>;\n  lte?: Maybe<Scalars['String']>;\n  gt?: Maybe<Scalars['String']>;\n  gte?: Maybe<Scalars['String']>;\n  contains?: Maybe<Scalars['String']>;\n  startsWith?: Maybe<Scalars['String']>;\n  endsWith?: Maybe<Scalars['String']>;\n};\n\nexport type BatchPayload = {\n  __typename?: 'BatchPayload';\n  count: Scalars['Int'];\n};\n\nexport type PplUpdateInput = {\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type PplUpdateManyMutationInput = {\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type ProductCreateInput = {\n  id?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n};\n\nexport type ProductWhereInput = {\n  id?: Maybe<StringFilter>;\n  name?: Maybe<StringFilter>;\n  AND?: Maybe<Array<ProductWhereInput>>;\n  OR?: Maybe<Array<ProductWhereInput>>;\n  NOT?: Maybe<Array<ProductWhereInput>>;\n};\n\nexport type ProductUpdateInput = {\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type ProductUpdateManyMutationInput = {\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n};\n\n\n\nexport type AllUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllUsersQuery = (\n  { __typename?: 'Query' }\n  & { allUsers?: Maybe<Array<(\n    { __typename?: 'Ppl' }\n    & Pick<Ppl, 'id' | 'name'>\n  )>> }\n);\n\nexport type AllProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AllProductsQuery = (\n  { __typename?: 'Query' }\n  & { allProducts?: Maybe<Array<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'name'>\n  )>> }\n);\n\n\nexport const AllUsersDocument = gql`\n    query AllUsers {\n  allUsers {\n    id\n    name\n  }\n}\n    `;\n\nexport function useAllUsersQuery(options: Omit<Urql.UseQueryArgs<AllUsersQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<AllUsersQuery>({ query: AllUsersDocument, ...options });\n};\nexport const AllProductsDocument = gql`\n    query AllProducts {\n  allProducts {\n    id\n    name\n  }\n}\n    `;\n\nexport function useAllProductsQuery(options: Omit<Urql.UseQueryArgs<AllProductsQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<AllProductsQuery>({ query: AllProductsDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}