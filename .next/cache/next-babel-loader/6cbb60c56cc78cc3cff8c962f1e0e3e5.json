{"ast":null,"code":"var _jsxFileName = \"/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/details/[id].tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Button, Card, CardActions, CardContent, CardMedia, Typography } from \"@material-ui/core\";\nimport useStyles from '../style';\nimport { gql } from '@apollo/client';\nimport client from \"../../apollo\";\nimport Loading from \"../../../components/Loading\";\nconst DETAIL_PRODUCT = gql`\n    query product($queryStr: String!) {\n        product(queryStr: $queryStr) {\n            id\n            name\n        }\n    }\n`;\nconst ALL_PRODUCTS = gql`\n    query allProducts($skip: String!, $take: String!) {\n        allProducts(skip: $skip, take: $take) {\n            id\n            name\n        }\n    }\n`;\nexport default function ProductDetails({\n  product\n}) {\n  if (!product) {\n    return __jsx(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 16\n      }\n    });\n  }\n\n  const classes = useStyles();\n  return __jsx(Card, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, __jsx(CardMedia, {\n    className: classes.img,\n    image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRROrogs_AtLLQ3iO8Ji3UsVNGhqgGKCqOt7Q&usqp=CAU\",\n    title: \"Live from space album cover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: classes.details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, (product === null || product === void 0 ? void 0 : product.product[0]).name), __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, \"Price\"), __jsx(Typography, {\n    variant: \"h5\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, \"isAvailable\"), __jsx(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"desc\")), __jsx(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    size: \"small\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"Add to cart\"))));\n}\nexport const getStaticProps = async ctx => {\n  var _ctx$params, _ctx$params2;\n\n  console.log('ctx?.params?.id', ctx === null || ctx === void 0 ? void 0 : (_ctx$params = ctx.params) === null || _ctx$params === void 0 ? void 0 : _ctx$params.id);\n  const {\n    data\n  } = await client.query({\n    query: DETAIL_PRODUCT,\n    variables: {\n      queryStr: ctx === null || ctx === void 0 ? void 0 : (_ctx$params2 = ctx.params) === null || _ctx$params2 === void 0 ? void 0 : _ctx$params2.id\n    }\n  });\n  console.log('data-->', data);\n  return {\n    props: {\n      product: data\n    }\n  };\n};\nexport const getStaticPaths = async () => {\n  const take = \"4\";\n  const {\n    data\n  } = await client.query({\n    query: ALL_PRODUCTS,\n    variables: {\n      skip: \"0\",\n      take: take\n    }\n  }); // Get the paths we want to pre-render based on posts\n\n  const paths = data.slice(0, 2).map(post => {\n    return {\n      params: {\n        id: post.id\n      }\n    };\n  });\n  console.log('paths-->', paths);\n  return {\n    fallback: true,\n    paths\n  };\n};","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/details/[id].tsx"],"names":["React","Button","Card","CardActions","CardContent","CardMedia","Typography","useStyles","gql","client","Loading","DETAIL_PRODUCT","ALL_PRODUCTS","ProductDetails","product","classes","root","img","details","name","getStaticProps","ctx","console","log","params","id","data","query","variables","queryStr","props","getStaticPaths","take","skip","paths","slice","map","post","fallback"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Button, Card, CardActions, CardContent, CardMedia, Typography} from \"@material-ui/core\"\nimport useStyles from '../style'\nimport { gql } from '@apollo/client'\nimport {GetStaticPaths, GetStaticProps} from \"next\";\nimport client from \"../../apollo\";\nimport Loading from \"../../../components/Loading\";\nimport {Product} from \"../../../interfaces\";\n\nconst DETAIL_PRODUCT = gql`\n    query product($queryStr: String!) {\n        product(queryStr: $queryStr) {\n            id\n            name\n        }\n    }\n`\nconst ALL_PRODUCTS = gql`\n    query allProducts($skip: String!, $take: String!) {\n        allProducts(skip: $skip, take: $take) {\n            id\n            name\n        }\n    }\n`\n\nexport interface IProduct {\n    product: Product\n}\n\nexport default function ProductDetails ({product}: IProduct) {\n    if( !product) {\n        return <Loading/>\n    }\n\n    const classes = useStyles()\n    return (\n    <Card className={classes.root}>\n        <CardMedia\n            className={classes.img}\n            image=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRROrogs_AtLLQ3iO8Ji3UsVNGhqgGKCqOt7Q&usqp=CAU\"\n            title=\"Live from space album cover\"\n        />\n        <div className={classes.details}>\n            <CardContent>\n                <Typography component=\"h1\" variant=\"h3\">\n                    {product?.product[0]!.name}\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                    Price\n                </Typography>\n                <Typography variant=\"h5\" color=\"textSecondary\">\n                    isAvailable\n                </Typography>\n                <Typography variant=\"subtitle2\">\n                    desc\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\" color=\"primary\">\n                    Add to cart\n                </Button>\n            </CardActions>\n        </div>\n    </Card>\n    );\n}\n\nexport const getStaticProps:GetStaticProps = async (ctx) => {\n    console.log('ctx?.params?.id', ctx?.params?.id )\n    const {data } = await client.query({\n        query: DETAIL_PRODUCT,\n        variables: {queryStr: ctx?.params?.id}\n    })\n    console.log('data-->', data)\n\n    return {\n        props: {\n            product: data!\n        },\n    }\n}\n\nexport const getStaticPaths:GetStaticPaths<{id:string}> = async () => {\n    const take: string = \"4\";\n    const {  data } = await client.query({\n        query: ALL_PRODUCTS,\n        variables: {\n            skip: \"0\",\n            take: take\n        }\n    });\n\n    // Get the paths we want to pre-render based on posts\n    const paths = data!.slice(0, 2).map(post => {\n        return {params: {id: post.id}}\n    });\n\n    console.log('paths-->', paths)\n    return {\n        fallback: true,\n        paths\n    }\n}\n"]},"metadata":{},"sourceType":"module"}