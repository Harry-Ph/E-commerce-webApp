{"ast":null,"code":"var _jsxFileName = \"/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport { withUrqlClient } from \"next-urql\";\nimport NextApp from \"next/app\";\nimport fetch from \"isomorphic-unfetch\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport client from \"./apollo\"; // the URL to /api/graphql\n\nexport const GRAPHQL_ENDPOINT = `http://localhost:3000/api/graphql`;\n\nconst App = ({\n  Component,\n  pageProps\n}) => {\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  })));\n};\n\nApp.getInitialProps = async ctx => {\n  const appProps = await NextApp.getInitialProps(ctx);\n  return _objectSpread({}, appProps);\n};\n\nexport default withUrqlClient((_ssrExchange, _ctx) => ({\n  url: GRAPHQL_ENDPOINT,\n  fetch\n}))( // @ts-ignore\nApp);","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/_app.tsx"],"names":["React","withUrqlClient","NextApp","fetch","ApolloProvider","client","GRAPHQL_ENDPOINT","App","Component","pageProps","getInitialProps","ctx","appProps","_ssrExchange","_ctx","url"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAAmD,WAAnD;AACA,OAAOC,OAAP,MAAkC,UAAlC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAAQC,cAAR,QAA6B,gBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAI,mCAA1B;;AAEP,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAwC;AAClD,SACI,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeI,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADJ;AAID,CALD;;AAOAF,GAAG,CAACG,eAAJ,GAAsB,MAAOC,GAAP,IAAmC;AACvD,QAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACQ,eAAR,CAAwBC,GAAxB,CAAvB;AACA,2BAAYC,QAAZ;AACD,CAHD;;AAKA,eAAeX,cAAc,CAAC,CAACY,YAAD,EAAeC,IAAf,MAAyB;AACrDC,EAAAA,GAAG,EAAET,gBADgD;AAErDH,EAAAA;AAFqD,CAAzB,CAAD,CAAd,EAIb;AACAI,GALa,CAAf","sourcesContent":["import React from \"react\";\nimport { withUrqlClient, NextUrqlAppContext } from \"next-urql\";\nimport NextApp, { AppProps } from \"next/app\";\nimport fetch from \"isomorphic-unfetch\";\nimport {ApolloProvider} from \"@apollo/client\";\nimport client from \"./apollo\";\n\n// the URL to /api/graphql\nexport const GRAPHQL_ENDPOINT = `http://localhost:3000/api/graphql`;\n\nconst App = ({ Component, pageProps }: AppProps) => {\n  return (\n      <ApolloProvider client={client}>\n        <Component {...pageProps} />\n      </ApolloProvider>);\n};\n\nApp.getInitialProps = async (ctx: NextUrqlAppContext) => {\n  const appProps = await NextApp.getInitialProps(ctx);\n  return { ...appProps };\n};\n\nexport default withUrqlClient((_ssrExchange, _ctx) => ({\n  url: GRAPHQL_ENDPOINT,\n  fetch,\n}))(\n  // @ts-ignore\n  App\n);\n"]},"metadata":{},"sourceType":"module"}