{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Link from 'next/link';\nimport Layout from '../../components/Layout';\nimport gql from 'graphql-tag';\nimport client from '../apollo';\nimport Table from '../../components/Table';\nimport { Box } from '@material-ui/core';\nimport Loading from '../../components/Loading';\nimport { useRouter } from 'next/router';\nimport { Pagination, PaginationItem, Skeleton } from '@material-ui/lab';\nimport { PrismaClient } from '@prisma/client';\nconst prisma2 = new PrismaClient();\nexport const AllUsersQuery = gql`\n  query AllUsers($skip: String!, $take: String!) {\n    allUsers(skip: $skip, take: $take) {\n      id\n      username\n      email\n      password\n      role\n      status\n    }\n  }\n`;\n\nconst WithStaticProps = ({\n  loading,\n  users,\n  numberPages\n}) => {\n  const router = useRouter();\n\n  if (loading || !users) {\n    return __jsx(Loading, null);\n  }\n\n  return __jsx(Layout, {\n    title: \"Users List | Next.js + TypeScript Example\"\n  }, __jsx(\"h1\", null, \"Users List\"), __jsx(\"p\", null, \"Example fetching data from inside \", __jsx(\"code\", null, \"getStaticProps()\"), \".\"), __jsx(\"p\", null, \"You are currently on: /users\"), __jsx(Box, null, numberPages > 0 || !loading ? __jsx(Pagination, {\n    page: parseInt(router.query.page || '1'),\n    count: numberPages,\n    defaultPage: 1,\n    renderItem: item => __jsx(PaginationItem, _extends({\n      component: MaterialUiLink,\n      query: router.query,\n      item: item\n    }, item))\n  }) : __jsx(Skeleton, {\n    variant: \"rect\",\n    width: '30vw',\n    height: '28px'\n  })), __jsx(Table, {\n    items: users\n  }), __jsx(\"p\", null, __jsx(Link, {\n    href: \"/api/books\"\n  }, __jsx(\"a\", null, \"Go home\"))));\n};\n\nexport default WithStaticProps;\nexport function MaterialUiLink(_ref) {\n  let {\n    item,\n    query\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"item\", \"query\"]);\n\n  return __jsx(Link, {\n    href: {\n      // users?page=1\n      pathname: '/users',\n      query: _objectSpread(_objectSpread({}, query), {}, {\n        page: item.page\n      })\n    }\n  }, __jsx(\"a\", props));\n}\nexport const getServerSideProps = async ctx => {\n  var _ctx$query;\n\n  const pageQuery = ((_ctx$query = ctx.query) === null || _ctx$query === void 0 ? void 0 : _ctx$query.page) || 1;\n  ctx.req;\n  const take = '3';\n  const totalUsers = await prisma2.ppl.findMany();\n  const usersArray = Object.keys(totalUsers).map(k => totalUsers[parseInt(k)]);\n  const numberPages = Math.ceil(((usersArray === null || usersArray === void 0 ? void 0 : usersArray.length) || 0) / +take);\n  const first = String((parseInt(pageQuery) - 1) * +take);\n  const {\n    loading,\n    data\n  } = await client.query({\n    query: AllUsersQuery,\n    variables: {\n      skip: first,\n      take: take\n    }\n  });\n  return {\n    props: {\n      loading,\n      users: data === null || data === void 0 ? void 0 : data.allUsers,\n      numberPages\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}