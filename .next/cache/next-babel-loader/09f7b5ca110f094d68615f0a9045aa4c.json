{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { ApolloClient } from '@apollo/client';\nvar apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({// ssrMode: typeof window === 'undefined',\n    // link: new HttpLink({\n    //     uri: 'http://localhost:3000/api/graphql', // Server URL (must be absolute)\n    //     credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n    // }),\n    // cache: new InMemoryCache({\n    //     typePolicies: {\n    //         Query: {\n    //             fields: {\n    //                 allProducts: concatPagination(),\n    //             },\n    //         },\n    //     },\n    // }),\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n\n  console.log(_apolloClient.cache); // For SSG and SSR always create a new Apollo Client\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/apollo/index.tsx"],"names":["useMemo","ApolloClient","apolloClient","createApolloClient","initializeApollo","initialState","_apolloClient","cache","restore","console","log","useApollo","store"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,QAAsD,gBAAtD;AAGA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC1B,SAAO,IAAIF,YAAJ,CAAiB,CACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdoB,GAAjB,CAAP;AAgBH;;AAED,OAAO,SAASG,gBAAT,GAA+C;AAAA;;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AAClD,MAAMC,aAAa,qBAAGJ,YAAH,2DAAmBC,kBAAkB,EAAxD,CADkD,CAGlD;AACA;;;AACA,MAAIE,YAAJ,EAAkB;AACdC,IAAAA,aAAa,CAACC,KAAd,CAAoBC,OAApB,CAA4BH,YAA5B;AACH;;AACDI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAa,CAACC,KAA1B,EARkD,CASlD;;AACA,aAAmC,OAAOD,aAAP,CAVe,CAWlD;;AACA,MAAI,CAACJ,YAAL,EAAmBA,YAAY,GAAGI,aAAf;AAEnB,SAAOA,aAAP;AACH;AAED,OAAO,SAASK,SAAT,CAAmBN,YAAnB,EAAsC;AAAA;;AACzC,MAAMO,KAAK,GAAGZ,OAAO,CAAC;AAAA,WAAMI,gBAAgB,CAACC,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOO,KAAP;AACH;;GAHeD,S","sourcesContent":["import { useMemo } from 'react'\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport { concatPagination } from '@apollo/client/utilities'\n\nlet apolloClient: any\n\nfunction createApolloClient() {\n    return new ApolloClient({\n        // ssrMode: typeof window === 'undefined',\n        // link: new HttpLink({\n        //     uri: 'http://localhost:3000/api/graphql', // Server URL (must be absolute)\n        //     credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n        // }),\n        // cache: new InMemoryCache({\n        //     typePolicies: {\n        //         Query: {\n        //             fields: {\n        //                 allProducts: concatPagination(),\n        //             },\n        //         },\n        //     },\n        // }),\n    })\n}\n\nexport function initializeApollo(initialState = null) {\n    const _apolloClient = apolloClient ?? createApolloClient()\n\n    // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n    // gets hydrated here\n    if (initialState) {\n        _apolloClient.cache.restore(initialState)\n    }\n    console.log(_apolloClient.cache)\n    // For SSG and SSR always create a new Apollo Client\n    if (typeof window === 'undefined') return _apolloClient\n    // Create the Apollo Client once in the client\n    if (!apolloClient) apolloClient = _apolloClient\n\n    return _apolloClient\n}\n\nexport function useApollo(initialState: any) {\n    const store = useMemo(() => initializeApollo(initialState), [initialState])\n    return store\n}"]},"metadata":{},"sourceType":"module"}