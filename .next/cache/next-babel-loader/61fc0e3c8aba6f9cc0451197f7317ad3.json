{"ast":null,"code":"import { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { concatPagination } from '@apollo/client/utilities';\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: 'http://localhost:3000/api/graphql',\n      // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allProducts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n\n  console.log(_apolloClient.cache); // For SSG and SSR always create a new Apollo Client\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/apollo/index.tsx"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","concatPagination","apolloClient","createApolloClient","ssrMode","link","uri","credentials","cache","typePolicies","Query","fields","allProducts","initializeApollo","initialState","_apolloClient","restore","console","log","useApollo","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC1B,SAAO,IAAIL,YAAJ,CAAiB;AACpBM,IAAAA,OAAO,MADa;AAEpBC,IAAAA,IAAI,EAAE,IAAIN,QAAJ,CAAa;AACfO,MAAAA,GAAG,EAAE,mCADU;AAC2B;AAC1CC,MAAAA,WAAW,EAAE,aAFE,CAEa;;AAFb,KAAb,CAFc;AAMpBC,IAAAA,KAAK,EAAE,IAAIR,aAAJ,CAAkB;AACrBS,MAAAA,YAAY,EAAE;AACVC,QAAAA,KAAK,EAAE;AACHC,UAAAA,MAAM,EAAE;AACJC,YAAAA,WAAW,EAAEX,gBAAgB;AADzB;AADL;AADG;AADO,KAAlB;AANa,GAAjB,CAAP;AAgBH;;AAED,OAAO,SAASY,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AAClD,QAAMC,aAAa,qBAAGb,YAAH,2DAAmBC,kBAAkB,EAAxD,CADkD,CAGlD;AACA;;;AACA,MAAIW,YAAJ,EAAkB;AACdC,IAAAA,aAAa,CAACP,KAAd,CAAoBQ,OAApB,CAA4BF,YAA5B;AACH;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAa,CAACP,KAA1B,EARkD,CASlD;;AACA,YAAmC,OAAOO,aAAP,CAVe,CAWlD;;AACA,MAAI,CAACb,YAAL,EAAmBA,YAAY,GAAGa,aAAf;AAEnB,SAAOA,aAAP;AACH;AAED,OAAO,SAASI,SAAT,CAAmBL,YAAnB,EAAsC;AACzC,QAAMM,KAAK,GAAGvB,OAAO,CAAC,MAAMgB,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOM,KAAP;AACH","sourcesContent":["import { useMemo } from 'react'\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport { concatPagination } from '@apollo/client/utilities'\n\nlet apolloClient: any\n\nfunction createApolloClient() {\n    return new ApolloClient({\n        ssrMode: typeof window === 'undefined',\n        link: new HttpLink({\n            uri: 'http://localhost:3000/api/graphql', // Server URL (must be absolute)\n            credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n        }),\n        cache: new InMemoryCache({\n            typePolicies: {\n                Query: {\n                    fields: {\n                        allProducts: concatPagination(),\n                    },\n                },\n            },\n        }),\n    })\n}\n\nexport function initializeApollo(initialState = null) {\n    const _apolloClient = apolloClient ?? createApolloClient()\n\n    // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n    // gets hydrated here\n    if (initialState) {\n        _apolloClient.cache.restore(initialState)\n    }\n    console.log(_apolloClient.cache)\n    // For SSG and SSR always create a new Apollo Client\n    if (typeof window === 'undefined') return _apolloClient\n    // Create the Apollo Client once in the client\n    if (!apolloClient) apolloClient = _apolloClient\n\n    return _apolloClient\n}\n\nexport function useApollo(initialState: any) {\n    const store = useMemo(() => initializeApollo(initialState), [initialState])\n    return store\n}"]},"metadata":{},"sourceType":"module"}