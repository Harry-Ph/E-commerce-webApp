{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Modal, Backdrop, Fade, Button, CircularProgress, Box, FormGroup, TextField } from '@material-ui/core';\nimport { request } from \"graphql-request\";\nimport { mutate, trigger } from 'swr';\nimport useStyles from './style';\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport { object, string } from \"yup\";\n\nconst sleep = time => new Promise(acc => setTimeout(acc, time));\n/* GraphQL */\n\n\nconst REMOVE_PRODUCT =\n/* GraphQL */\n`\n    mutation removeProductById($id: String!) {\n        removeProductById(id: $id) {\n            id\n            name\n        }\n    }\n`;\nconst API = 'http://localhost:3000/api/graphql';\nconst initialValues = {\n  name: ''\n}; // @ts-ignore\n\nexport default function TransitionsModal({\n  products,\n  redirectRouting,\n  currentPage,\n  handleOpen,\n  product,\n  handleClose,\n  open,\n  isEdit\n}) {\n  const classes = useStyles();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n\n  const handleRemoveInModal = async e => {\n    e.preventDefault();\n    e.stopPropagation();\n    await setIsLoading(true);\n    await sleep(2000);\n    const {\n      id\n    } = product;\n    console.log('products', products);\n    await mutate(API, [...(products === null || products === void 0 ? void 0 : products.filter(p => (p === null || p === void 0 ? void 0 : p.id) != id))], false);\n    await request(API, REMOVE_PRODUCT, {\n      id\n    }); // await  mutate(API, async () => {\n    //   const {allProducts} = await fetcher(ALL_PRODUCTS2, skip as string, take as string);\n    //   return [...allProducts?.filter(p => p?.id != id)];\n    // })\n\n    await trigger(API);\n    await handleClose(e); // await redirectRouting(String(currentPage))\n    // await Router.replace(`/products/${currentPage}`,  `/products/${currentPage}`, {shallow: true})\n  };\n\n  return __jsx(\"div\", null, __jsx(Modal, {\n    className: classes.modal,\n    open: open,\n    onClose: handleClose,\n    closeAfterTransition: true,\n    BackdropComponent: Backdrop,\n    BackdropProps: {\n      timeout: 500\n    }\n  }, __jsx(Fade, {\n    in: open\n  }, __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(\"h2\", {\n    id: \"transition-modal-title\"\n  }, isEdit ? 'EDIT' : 'DELETE', \" THIS PRODUCT\"), __jsx(\"p\", {\n    id: \"transition-modal-description\"\n  }, \"Do you want to \", isEdit ? 'edit' : 'delete', \" this item?.\"), isEdit ? __jsx(Formik, {\n    validationSchema: object({\n      name: string().required().min(2).max(50)\n    }),\n    initialValues: initialValues,\n    onSubmit: () => {}\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, null, __jsx(Box, null, __jsx(FormGroup, null, __jsx(Field, {\n    name: \"name\",\n    as: TextField,\n    label: \"Name\"\n  }), __jsx(ErrorMessage, {\n    name: \"name\"\n  }))), __jsx(Button, {\n    size: \"small\",\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    disabled: isSubmitting\n  }, \"SUBMIT\"), __jsx(Button, {\n    size: \"small\",\n    variant: \"outlined\",\n    color: \"default\",\n    type: \"submit\",\n    onClick: handleClose,\n    disabled: isLoading\n  }, \"CANCEL\"))) : __jsx(React.Fragment, null, __jsx(Button, {\n    size: \"small\",\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleRemoveInModal,\n    startIcon: isLoading ? __jsx(CircularProgress, {\n      size: \"1rem\"\n    }) : null,\n    disabled: isLoading\n  }, \"REMOVE\"), __jsx(Button, {\n    size: \"small\",\n    variant: \"outlined\",\n    color: \"default\",\n    type: \"submit\",\n    onClick: handleClose,\n    disabled: isLoading\n  }, \"CANCEL\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}