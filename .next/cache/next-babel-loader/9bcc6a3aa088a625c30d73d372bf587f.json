{"ast":null,"code":"var _jsxFileName = \"/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/create.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Button, Card, CardContent, CircularProgress, Grid, MenuItem, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object, string } from 'yup';\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { Select } from 'formik-material-ui';\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst sleep = time => new Promise(acc => setTimeout(acc, time));\n\nconst DETAIL_PRODUCT = gql`\n    query product($queryStr: String!) {\n        product(queryStr: $queryStr) {\n            id\n            name\n        }\n    }\n`;\nconst CREATE_PRODUCT = gql`\n    mutation createNewOneProduct($name: String!) {\n        createNewOneProduct(name: $name) {\n            id\n            name\n        }\n    }\n`;\nconst ALL_PRODUCTS = gql`\n    query allProducts($skip: String!, $take: String!) {\n        allProducts(skip: $skip, take: $take) {\n            id\n            name\n        }\n    }\n`;\nexport default function CreateProduct() {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const [addProduct, {\n    data\n  }] = useMutation(CREATE_PRODUCT);\n  return __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, __jsx(FormikStepper, {\n    initialValues: {\n      name: '',\n      brand: 'Other',\n      isAvailable: false,\n      money: 0,\n      description: ''\n    },\n    onSubmit: async values => {\n      await sleep(2000);\n      console.log('values', values);\n      await setName(values.name); // try {\n      //   const {data} = await client.query({\n      //     query: CREATE_PRODUCT,\n      //     variables: {\n      //       name: 'test hang'\n      //     }\n      //   })\n      //   // const {  data } = await client.query({\n      //   //   query: ALL_PRODUCTS,\n      //   //   variables: {\n      //   //     skip: 0,\n      //   //     take: 10\n      //   //   }\n      //   // })\n      //   console.log('dataaaa ne-> ', data)\n      // } catch (e) {\n      //   throw new Error(e)\n      //   console.log(e)\n      // }\n      // const {data} = await client.query({\n      //   query: CREATE_PRODUCT,\n      //   variables: {\n      //     name: 'test hang'\n      //   }\n      // })\n\n      const a1 = await addProduct({\n        variables: {\n          name: 'test hang'\n        }\n      });\n      console.log('data ne-> ', data);\n      console.log('a1 ne-> ', a1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(FormikStep, {\n    label: \"Data Info\",\n    validationSchema: object({\n      name: string().required().min(3).max(100)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"name\",\n    component: TextField,\n    label: \"Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, __jsx(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, __jsx(Field, {\n    name: \"brand\",\n    component: Select,\n    label: \"Brand\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, __jsx(MenuItem, {\n    value: \"Nike\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }\n  }, \"Nike\"), __jsx(MenuItem, {\n    value: \"Adidas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 19\n    }\n  }, \"Adidas\"), __jsx(MenuItem, {\n    value: \"Puma\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  }, \"Puma\"), __jsx(MenuItem, {\n    value: \"Gucci\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  }, \"Gucci\"), __jsx(MenuItem, {\n    value: \"Dior\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }, \"Dior\"), __jsx(MenuItem, {\n    value: \"Nana\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }\n  }, \"Nana\"), __jsx(MenuItem, {\n    defaultChecked: true,\n    value: \"Other\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }, \"Other\")))), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    name: \"isAvailable\",\n    type: \"checkbox\",\n    component: CheckboxWithLabel,\n    Label: {\n      label: 'Is product still available?'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"Price\",\n    validationSchema: object({\n      money: mixed().when('isAvailable', {\n        is: true,\n        then: number().required().min(0, 'The min-price of product is 0 eur'),\n        otherwise: number().required()\n      })\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"money\",\n    type: \"number\",\n    component: TextField,\n    label: \"All the money I have\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"More Info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"description\",\n    component: TextField,\n    label: \"Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  }))))));\n}\nexport function FormikStep({\n  children\n}) {\n  return __jsx(React.Fragment, null, children);\n}\nexport function FormikStepper(_ref) {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const childrenArray = React.Children.toArray(children);\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const currentChild = childrenArray[step];\n  const {\n    0: completed,\n    1: setCompleted\n  } = useState(false);\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return __jsx(Formik, _extends({}, props, {\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: async (values, helpers) => {\n      if (isLastStep()) {\n        await props.onSubmit(values, helpers);\n        setCompleted(true);\n      } else {\n        setStep(s => s + 1);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }), ({\n    isSubmitting\n  }) => __jsx(Form, {\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, __jsx(Stepper, {\n    alternativeLabel: true,\n    activeStep: step,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }, childrenArray.map((child, index) => __jsx(Step, {\n    key: child.props.label,\n    completed: step > index || completed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }\n  }, __jsx(StepLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }, child.props.label)))), currentChild, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, step > 0 ? __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    disabled: isSubmitting,\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => setStep(s => s - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, \"Back\")) : null, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    startIcon: isSubmitting ? __jsx(CircularProgress, {\n      size: \"1rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 43\n      }\n    }) : null,\n    disabled: isSubmitting,\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 15\n    }\n  }, isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next')))));\n}","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/create.tsx"],"names":["Box","Button","Card","CardContent","CircularProgress","Grid","MenuItem","Step","StepLabel","Stepper","Field","Form","Formik","CheckboxWithLabel","TextField","React","useState","mixed","number","object","string","FormGroup","Select","gql","useMutation","sleep","time","Promise","acc","setTimeout","DETAIL_PRODUCT","CREATE_PRODUCT","ALL_PRODUCTS","CreateProduct","name","setName","addProduct","data","brand","isAvailable","money","description","values","console","log","a1","variables","required","min","max","label","when","is","then","otherwise","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","step","setStep","currentChild","completed","setCompleted","isLastStep","length","validationSchema","helpers","onSubmit","s","isSubmitting","map","child","index"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CircularProgress,\n  Grid,\n  MenuItem,\n  Step,\n  StepLabel,\n  Stepper\n} from '@material-ui/core';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport {mixed, number, object, string} from 'yup';\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { Select } from 'formik-material-ui';\nimport {gql, useMutation} from \"@apollo/client\";\nimport client from \"../apollo\";\nimport {useQuery} from \"urql\";\n\nconst sleep = (time) => new Promise((acc) => setTimeout(acc, time));\n\nconst DETAIL_PRODUCT = gql`\n    query product($queryStr: String!) {\n        product(queryStr: $queryStr) {\n            id\n            name\n        }\n    }\n`\n\nconst CREATE_PRODUCT = gql`\n    mutation createNewOneProduct($name: String!) {\n        createNewOneProduct(name: $name) {\n            id\n            name\n        }\n    }\n`\n\nconst ALL_PRODUCTS = gql`\n    query allProducts($skip: String!, $take: String!) {\n        allProducts(skip: $skip, take: $take) {\n            id\n            name\n        }\n    }\n`\n\nexport default function CreateProduct() {\n  const [name, setName] = useState('');\n  const [addProduct, { data }] = useMutation(CREATE_PRODUCT);\n  return (\n    <Card>\n      <CardContent>\n        <FormikStepper\n          initialValues={{\n            name: '',\n            brand: 'Other',\n            isAvailable: false,\n            money: 0,\n            description: '',\n          }}\n          onSubmit={async (values) => {\n            await sleep(2000);\n            console.log('values', values);\n            await setName(values!.name)\n            // try {\n            //   const {data} = await client.query({\n            //     query: CREATE_PRODUCT,\n            //     variables: {\n            //       name: 'test hang'\n            //     }\n            //   })\n            //   // const {  data } = await client.query({\n            //   //   query: ALL_PRODUCTS,\n            //   //   variables: {\n            //   //     skip: 0,\n            //   //     take: 10\n            //   //   }\n            //   // })\n            //   console.log('dataaaa ne-> ', data)\n            // } catch (e) {\n            //   throw new Error(e)\n            //   console.log(e)\n            // }\n\n\n            // const {data} = await client.query({\n            //   query: CREATE_PRODUCT,\n            //   variables: {\n            //     name: 'test hang'\n            //   }\n            // })\n\n            const a1 = await addProduct({  variables: {\n                name: 'test hang'\n              } });\n\n            console.log('data ne-> ', data)\n            console.log('a1 ne-> ', a1)\n          }}\n        >\n          <FormikStep\n            label=\"Data Info\"\n            validationSchema={\n              object({\n                name: string().required().min(3).max(100),\n              })\n            }\n          >\n            <Box paddingBottom={2}>\n              <Field fullWidth name=\"name\" component={TextField} label=\"Name\" />\n            </Box>\n            <Box paddingBottom={2}>\n              <FormGroup>\n                <Field name=\"brand\" component={Select} label=\"Brand\">\n                  <MenuItem value=\"Nike\">Nike</MenuItem>\n                  <MenuItem value=\"Adidas\">Adidas</MenuItem>\n                  <MenuItem value=\"Puma\">Puma</MenuItem>\n                  <MenuItem value=\"Gucci\">Gucci</MenuItem>\n                  <MenuItem value=\"Dior\">Dior</MenuItem>\n                  <MenuItem value=\"Nana\">Nana</MenuItem>\n                  <MenuItem defaultChecked={true} value=\"Other\">Other</MenuItem>\n                </Field>\n              </FormGroup>\n            </Box>\n            <Box paddingBottom={2}>\n              <Field\n                name=\"isAvailable\"\n                type=\"checkbox\"\n                component={CheckboxWithLabel}\n                Label={{ label: 'Is product still available?' }}\n              />\n            </Box>\n          </FormikStep>\n          <FormikStep\n            label=\"Price\"\n            validationSchema={object({\n              money: mixed().when('isAvailable', {\n                is: true,\n                then: number()\n                  .required()\n                  .min(\n                    0,\n                    'The min-price of product is 0 eur'\n                  ),\n                otherwise: number().required(),\n              }),\n            })}\n          >\n            <Box paddingBottom={2}>\n              <Field\n                fullWidth\n                name=\"money\"\n                type=\"number\"\n                component={TextField}\n                label=\"All the money I have\"\n              />\n            </Box>\n          </FormikStep>\n          <FormikStep label=\"More Info\">\n            <Box paddingBottom={2}>\n              <Field fullWidth name=\"description\" component={TextField} label=\"Description\" />\n            </Box>\n          </FormikStep>\n        </FormikStepper>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport interface FormikStepProps\n  extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'> {\n  label: string;\n}\n\nexport function FormikStep({ children }: FormikStepProps) {\n  return <>{children}</>;\n}\n\nexport function FormikStepper({ children, ...props }: FormikConfig<FormikValues>) {\n  const childrenArray = React.Children.toArray(children) as React.ReactElement<FormikStepProps>[];\n  const [step, setStep] = useState(0);\n  const currentChild = childrenArray[step];\n  const [completed, setCompleted] = useState(false);\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return (\n    <Formik\n      {...props}\n      validationSchema={currentChild.props.validationSchema}\n      onSubmit={async (values, helpers) => {\n        if (isLastStep()) {\n          await props.onSubmit(values, helpers);\n          setCompleted(true);\n        } else {\n          setStep((s) => s + 1);\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <Stepper alternativeLabel activeStep={step}>\n            {childrenArray.map((child, index) => (\n              <Step key={child.props.label} completed={step > index || completed}>\n                <StepLabel>{child.props.label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n\n          {currentChild}\n\n          <Grid container spacing={2}>\n            {step > 0 ? (\n              <Grid item>\n                <Button\n                  disabled={isSubmitting}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => setStep((s) => s - 1)}\n                >\n                  Back\n                </Button>\n              </Grid>\n            ) : null}\n            <Grid item>\n              <Button\n                startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\n                disabled={isSubmitting}\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                {isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'}\n              </Button>\n            </Grid>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  );\n}"]},"metadata":{},"sourceType":"module"}