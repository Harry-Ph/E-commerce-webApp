{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport { Box, Button, Card, CardContent, CircularProgress, Grid, MenuItem, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object, string } from 'yup';\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { Select } from 'formik-material-ui';\nimport { request } from \"graphql-request\";\nimport { trigger, mutate } from 'swr';\nimport Router from \"next/router\";\nvar API = 'http://localhost:3000/api/graphql';\n\nvar sleep = function sleep(time) {\n  return new Promise(function (acc) {\n    return setTimeout(acc, time);\n  });\n};\n/* GraphQL */\n\n\nvar CREATE_PRODUCT2 =\n/* GraphQL */\n\"\\n    mutation createNewOneProduct($name: String!) {\\n        createNewOneProduct(name: $name) {\\n            id\\n            name\\n        }\\n    }\\n\";\nexport default function CreateProduct() {\n  // const [addProduct] = useMutation(CREATE_PRODUCT);\n  // the mutate function will do the refetching for us\n  // const { mutate } = useSWR(CREATE_PRODUCT2);\n  return __jsx(Card, null, __jsx(CardContent, null, __jsx(FormikStepper, {\n    initialValues: {\n      name: '',\n      brand: 'Other',\n      isAvailable: false,\n      money: 0,\n      description: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        var _yield$request, createNewOneProduct;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return sleep(2000);\n\n              case 2:\n                _context.next = 4;\n                return mutate(API);\n\n              case 4:\n                _context.next = 6;\n                return request(API, CREATE_PRODUCT2, {\n                  name: values.name\n                });\n\n              case 6:\n                _yield$request = _context.sent;\n                createNewOneProduct = _yield$request.createNewOneProduct;\n                console.log('data check', createNewOneProduct);\n                _context.next = 11;\n                return trigger(API);\n\n              case 11:\n                _context.next = 13;\n                return Router.push(\"/products/details/\".concat(createNewOneProduct.id));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  }, __jsx(FormikStep, {\n    label: \"Data Info\",\n    validationSchema: object({\n      name: string().required().min(3).max(100)\n    })\n  }, __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"name\",\n    component: TextField,\n    label: \"Name\"\n  })), __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(FormGroup, null, __jsx(Field, {\n    name: \"brand\",\n    component: Select,\n    label: \"Brand\"\n  }, __jsx(MenuItem, {\n    value: \"Nike\"\n  }, \"Nike\"), __jsx(MenuItem, {\n    value: \"Adidas\"\n  }, \"Adidas\"), __jsx(MenuItem, {\n    value: \"Puma\"\n  }, \"Puma\"), __jsx(MenuItem, {\n    value: \"Gucci\"\n  }, \"Gucci\"), __jsx(MenuItem, {\n    value: \"Dior\"\n  }, \"Dior\"), __jsx(MenuItem, {\n    value: \"Nana\"\n  }, \"Nana\"), __jsx(MenuItem, {\n    defaultChecked: true,\n    value: \"Other\"\n  }, \"Other\")))), __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(Field, {\n    name: \"isAvailable\",\n    type: \"checkbox\",\n    component: CheckboxWithLabel,\n    Label: {\n      label: 'Is product still available?'\n    }\n  }))), __jsx(FormikStep, {\n    label: \"Price\",\n    validationSchema: object({\n      money: mixed().when('isAvailable', {\n        is: true,\n        then: number().required().min(0, 'The min-price of product is 0 eur'),\n        otherwise: number().required()\n      })\n    })\n  }, __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"money\",\n    type: \"number\",\n    component: TextField,\n    label: \"All the money I have\"\n  }))), __jsx(FormikStep, {\n    label: \"More Info\"\n  }, __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"description\",\n    component: TextField,\n    label: \"Description\"\n  }))))));\n}\nexport function FormikStep(_ref2) {\n  var children = _ref2.children;\n  return __jsx(React.Fragment, null, children);\n}\nexport function FormikStepper(_ref3) {\n  var children = _ref3.children,\n      props = _objectWithoutProperties(_ref3, [\"children\"]);\n\n  var childrenArray = React.Children.toArray(children);\n\n  var _useState = useState(0),\n      step = _useState[0],\n      setStep = _useState[1];\n\n  var currentChild = childrenArray[step];\n\n  var _useState2 = useState(false),\n      completed = _useState2[0],\n      setCompleted = _useState2[1];\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return __jsx(Formik, _extends({}, props, {\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values, helpers) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!isLastStep()) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 3;\n                return props.onSubmit(values, helpers);\n\n              case 3:\n                setCompleted(true);\n                _context2.next = 7;\n                break;\n\n              case 6:\n                setStep(function (s) {\n                  return s + 1;\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  }), function (_ref5) {\n    var isSubmitting = _ref5.isSubmitting;\n    return __jsx(Form, {\n      autoComplete: \"off\"\n    }, __jsx(Stepper, {\n      alternativeLabel: true,\n      activeStep: step\n    }, childrenArray.map(function (child, index) {\n      return __jsx(Step, {\n        key: child.props.label,\n        completed: step > index || completed\n      }, __jsx(StepLabel, null, child.props.label));\n    })), currentChild, __jsx(Grid, {\n      container: true,\n      spacing: 2\n    }, step > 0 ? __jsx(Grid, {\n      item: true\n    }, __jsx(Button, {\n      disabled: isSubmitting,\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: function onClick() {\n        return setStep(function (s) {\n          return s - 1;\n        });\n      }\n    }, \"Back\")) : null, __jsx(Grid, {\n      item: true\n    }, __jsx(Button, {\n      startIcon: isSubmitting ? __jsx(CircularProgress, {\n        size: \"1rem\"\n      }) : null,\n      disabled: isSubmitting,\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\"\n    }, isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'))));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}