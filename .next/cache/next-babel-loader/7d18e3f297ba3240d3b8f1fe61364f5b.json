{"ast":null,"code":"import { schema, use } from \"nexus\";\nimport { prisma } from \"nexus-plugin-prisma\";\nimport { idArg, stringArg } from \"nexus/components/schema\";\nuse(prisma({\n  features: {\n    crud: true\n  }\n})); // use(\n//   prisma({\n//     client: { instance: new PrismaClient() },\n//   })\n// )\n\nschema.objectType({\n  name: \"Ppl\",\n\n  definition(t) {\n    t.model.id();\n    t.model.username();\n    t.model.email();\n    t.model.password();\n    t.model.role();\n    t.model.status();\n  }\n\n});\nschema.objectType({\n  name: \"Product\",\n\n  definition(t) {\n    t.model.id();\n    t.model.name();\n  }\n\n});\nschema.addToContext(_req => {\n  return {\n    customReq: _req\n  };\n});\nschema.queryType({\n  async definition(t) {\n    t.list.field(\"allUsers\", {\n      type: \"Ppl\",\n      args: {\n        skip: schema.stringArg({\n          nullable: true\n        }),\n        take: schema.stringArg({\n          nullable: true\n        })\n      },\n\n      resolve(_parent, _args, ctx) {\n        return ctx.db.ppl.findMany({\n          skip: parseInt(_args === null || _args === void 0 ? void 0 : _args.skip),\n          take: parseInt(_args === null || _args === void 0 ? void 0 : _args.take)\n        });\n      }\n\n    });\n    t.list.field(\"ppl\", {\n      type: \"Ppl\",\n      args: {\n        queryStr: schema.stringArg({\n          nullable: true\n        })\n      },\n      resolve: async (_parent, _args, ctx) => {\n        try {\n          const ppl = await ctx.db.ppl.findMany({\n            where: {\n              OR: [{\n                id: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }, {\n                username: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }]\n            }\n          }); // const product = t.crud.product(_args?.id!.toString() as ProductWhereUniqueInput);\n\n          return ppl;\n        } catch (error) {\n          throw new Error(error);\n        }\n      }\n    });\n    t.list.field(\"allProducts\", {\n      type: \"Product\",\n      args: {\n        skip: schema.stringArg({\n          nullable: true\n        }),\n        take: schema.stringArg({\n          nullable: true\n        })\n      },\n\n      resolve(_parent, _args, ctx) {\n        return ctx.db.product.findMany({\n          skip: parseInt(_args === null || _args === void 0 ? void 0 : _args.skip),\n          take: parseInt(_args === null || _args === void 0 ? void 0 : _args.take)\n        });\n      }\n\n    });\n    t.list.field(\"product\", {\n      type: \"Product\",\n      args: {\n        queryStr: schema.stringArg({\n          nullable: true\n        })\n      },\n      resolve: async (_parent, _args, ctx) => {\n        try {\n          const product = await ctx.db.product.findMany({\n            where: {\n              OR: [{\n                id: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }, {\n                name: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }]\n            }\n          }); // const product = t.crud.product(_args?.id!.toString() as ProductWhereUniqueInput);\n\n          return product;\n        } catch (error) {\n          throw new Error(error);\n        }\n      }\n    }); // t.crud.product();\n    // t.crud.products();\n  }\n\n});\nschema.mutationType({\n  definition(t) {\n    t.field(\"bigRedButton\", {\n      type: \"String\",\n\n      async resolve(_parent, _args, ctx) {\n        const {\n          count\n        } = await ctx.db.ppl.deleteMany({});\n        return `${count} user(s) destroyed. Thanos will be proud.`;\n      }\n\n    });\n    t.crud.createOnePpl();\n    t.crud.deleteOnePpl();\n    t.crud.deleteManyPpl();\n    t.crud.updateOnePpl();\n    t.crud.updateManyPpl();\n    t.field(\"removeAllProducts\", {\n      type: \"String\",\n\n      async resolve(_parent, _args, ctx) {\n        try {\n          const {\n            count\n          } = await ctx.db.product.deleteMany({});\n          return `${count} product(s) destroyed.`;\n        } catch (e) {\n          throw new Error(e);\n        }\n      }\n\n    }); // t.field(\"removeManyProducts\", {\n    //   type: \"String\",\n    //   args: {\n    //     data: arg({Product[]})\n    //   },\n    //   async resolve(_parent, _args, ctx) {\n    //     try {\n    //       const { count } = await ctx.db.product.deleteMany({});\n    //       return `${count} product(s) destroyed.`;\n    //     } catch (e) {\n    //       throw  new Error(e)\n    //     }\n    //   },\n    // });\n\n    t.field('removeProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: idArg() || stringArg()\n      },\n\n      resolve(parent, {\n        id\n      }, ctx) {\n        try {\n          return ctx.db.product.delete({\n            where: {\n              id: id\n            }\n          });\n        } catch (e) {\n          throw new Error(e);\n        }\n      }\n\n    });\n    t.field('updateProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: idArg(),\n        name: stringArg()\n      },\n\n      resolve(parent, {\n        id,\n        name\n      }, ctx) {\n        try {\n          return ctx.db.product.update({\n            where: {\n              id: id\n            },\n            data: {\n              name: name\n            }\n          });\n        } catch (e) {\n          throw new Error(e);\n        }\n      }\n\n    });\n    t.field('createNewOneProduct', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        name: stringArg()\n      },\n\n      resolve(parent, {\n        name\n      }, ctx) {\n        try {\n          return ctx.db.product.create({\n            data: {\n              name: name\n            }\n          });\n        } catch (e) {\n          throw new Error(e);\n        }\n      }\n\n    });\n    t.crud.createOneProduct();\n    t.crud.deleteOneProduct();\n    t.crud.deleteManyProduct();\n    t.crud.updateOneProduct();\n    t.crud.updateManyProduct();\n  }\n\n}); // schema.mutationType({\n//   definition(t) {\n//     t.field(\"bigRedButton\", {\n//       type: \"String\",\n//       async resolve(_parent, _args, ctx) {\n//         const { count } = await ctx.db.ppl.deleteMany({});\n//         return `${count} user(s) destroyed. Thanos will be proud.`;\n//       },\n//     });\n//\n//     t.crud.createOnePpl();\n//     t.crud.deleteOnePpl();\n//     t.crud.deleteManyPpl();\n//     t.crud.updateOnePpl();\n//     t.crud.updateManyPpl();\n//   },\n// });","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/graphql/schema.ts"],"names":["schema","use","prisma","idArg","stringArg","features","crud","objectType","name","definition","t","model","id","username","email","password","role","status","addToContext","_req","customReq","queryType","list","field","type","args","skip","nullable","take","resolve","_parent","_args","ctx","db","ppl","findMany","parseInt","queryStr","where","OR","error","Error","product","mutationType","count","deleteMany","createOnePpl","deleteOnePpl","deleteManyPpl","updateOnePpl","updateManyPpl","e","parent","delete","update","data","create","createOneProduct","deleteOneProduct","deleteManyProduct","updateOneProduct","updateManyProduct"],"mappings":"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","sourcesContent":["import { schema, use } from \"nexus\";\nimport { prisma } from \"nexus-plugin-prisma\";\nimport { idArg, stringArg } from \"nexus/components/schema\";\nimport { PrismaClient } from 'nexus-plugin-prisma/client'\nimport {arg} from \"nexus/dist/lib/cli\";\n\nuse(prisma({ features: { crud: true } }));\n\n// use(\n//   prisma({\n//     client: { instance: new PrismaClient() },\n//   })\n// )\n\nschema.objectType({\n  name: \"Ppl\",\n  definition(t) {\n    t.model.id();\n    t.model.username();\n    t.model.email();\n    t.model.password();\n    t.model.role();\n    t.model.status();\n  },\n});\n\nschema.objectType({\n  name: \"Product\",\n  definition(t) {\n    t.model.id();\n    t.model.name();\n  },\n});\n\nschema.addToContext(_req => {\n  return {\n    customReq: _req,\n  }\n})\n\n\nschema.queryType({\n  async definition(t) {\n    t.list.field(\"allUsers\", {\n      type: \"Ppl\",\n      args: {\n        skip: schema.stringArg({nullable: true}),\n        take: schema.stringArg({nullable: true}),\n      },\n      resolve(_parent, _args, ctx) {\n        return ctx.db.ppl.findMany({\n          skip: parseInt(_args?.skip!),\n          take: parseInt(_args?.take!),\n        });\n      },\n    });\n\n    t.list.field(\"ppl\", {\n      type: \"Ppl\",\n      args: { queryStr: schema.stringArg({nullable: true})},\n      resolve: async(_parent, _args, ctx) => {\n        try {\n          const ppl = await ctx.db.ppl.findMany({\n            where: {\n              OR: [\n                { id: _args?.queryStr! },\n                { username: _args?.queryStr! },\n              ],\n            },\n          });\n          // const product = t.crud.product(_args?.id!.toString() as ProductWhereUniqueInput);\n          return ppl;\n        } catch (error) {\n          throw  new Error(error)\n        }\n\n      }\n    });\n\n    t.list.field(\"allProducts\", {\n      type: \"Product\",\n      args: {\n        skip: schema.stringArg({nullable: true}),\n        take: schema.stringArg({nullable: true}),\n      },\n      resolve(_parent, _args, ctx) {\n        return ctx.db.product.findMany({\n          skip: parseInt(_args?.skip!),\n          take: parseInt(_args?.take!),\n        });\n      },\n    });\n\n    t.list.field(\"product\", {\n      type: \"Product\",\n      args: { queryStr: schema.stringArg({nullable: true})},\n      resolve: async(_parent, _args, ctx) => {\n        try {\n          const product = await ctx.db.product.findMany({\n            where: {\n              OR: [\n                { id: _args?.queryStr! },\n                { name: _args?.queryStr! },\n              ],\n            },\n          });\n          // const product = t.crud.product(_args?.id!.toString() as ProductWhereUniqueInput);\n          return product;\n        } catch (error) {\n          throw  new Error(error)\n        }\n\n    }\n  });\n\n    // t.crud.product();\n    // t.crud.products();\n  },\n});\n\nschema.mutationType({\n  definition(t) {\n    t.field(\"bigRedButton\", {\n      type: \"String\",\n      async resolve(_parent, _args, ctx) {\n        const { count } = await ctx.db.ppl.deleteMany({});\n        return `${count} user(s) destroyed. Thanos will be proud.`;\n      },\n    });\n\n    t.crud.createOnePpl();\n    t.crud.deleteOnePpl();\n    t.crud.deleteManyPpl();\n    t.crud.updateOnePpl();\n    t.crud.updateManyPpl();\n\n    t.field(\"removeAllProducts\", {\n      type: \"String\",\n      async resolve(_parent, _args, ctx) {\n        try {\n          const { count } = await ctx.db.product.deleteMany({});\n          return `${count} product(s) destroyed.`;\n        } catch (e) {\n          throw  new Error(e)\n        }\n      },\n    });\n\n    // t.field(\"removeManyProducts\", {\n    //   type: \"String\",\n    //   args: {\n    //     data: arg({Product[]})\n    //   },\n    //   async resolve(_parent, _args, ctx) {\n    //     try {\n    //       const { count } = await ctx.db.product.deleteMany({});\n    //       return `${count} product(s) destroyed.`;\n    //     } catch (e) {\n    //       throw  new Error(e)\n    //     }\n    //   },\n    // });\n\n    t.field('removeProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: idArg() || stringArg(),\n      },\n      resolve(parent, {id}, ctx) {\n        try {\n          return ctx.db.product.delete({\n            where: {\n              id: id!\n            }\n          })\n        } catch (e) {\n          throw  new Error(e)\n        }\n      }\n    })\n\n    t.field('updateProductById', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        id: idArg(),\n        name: stringArg()\n      },\n      resolve(parent, {id, name}, ctx) {\n        try {\n          return ctx.db.product.update({\n            where: {\n              id: id!\n            },\n            data: {\n              name: name!\n            }\n          })\n        } catch (e) {\n          throw  new Error(e)\n        }\n      }\n    })\n\n    t.field('createNewOneProduct', {\n      type: 'Product',\n      nullable: true,\n      args: {\n        name: stringArg(),\n      },\n      resolve(parent, {name}, ctx) {\n        try {\n          return ctx.db.product.create({\n            data: {\n              name: name!\n            }\n          })\n        } catch (e) {\n          throw  new Error(e)\n        }\n      }\n    })\n\n    t.crud.createOneProduct();\n    t.crud.deleteOneProduct();\n    t.crud.deleteManyProduct();\n    t.crud.updateOneProduct();\n    t.crud.updateManyProduct();\n  },\n});\n\n// schema.mutationType({\n//   definition(t) {\n//     t.field(\"bigRedButton\", {\n//       type: \"String\",\n//       async resolve(_parent, _args, ctx) {\n//         const { count } = await ctx.db.ppl.deleteMany({});\n//         return `${count} user(s) destroyed. Thanos will be proud.`;\n//       },\n//     });\n//\n//     t.crud.createOnePpl();\n//     t.crud.deleteOnePpl();\n//     t.crud.deleteManyPpl();\n//     t.crud.updateOnePpl();\n//     t.crud.updateManyPpl();\n//   },\n// });\n"]},"metadata":{},"sourceType":"module"}