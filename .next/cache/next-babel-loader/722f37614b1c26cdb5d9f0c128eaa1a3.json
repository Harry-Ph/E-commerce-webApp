{"ast":null,"code":"var _jsxFileName = \"/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/details/[id].tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Button, Card, CardActions, CardContent, CardMedia, Typography } from \"@material-ui/core\";\nimport useStyles from '../style';\nimport { gql } from '@apollo/client';\nimport client from \"../../apollo\";\nimport Loading from \"../../../components/Loading\";\nconst DETAIL_PRODUCT = gql`\n    query product($queryStr: String!) {\n        product(queryStr: $queryStr) {\n            id\n            name\n        }\n    }\n`;\nconst ALL_PRODUCTS = gql`\n    query allProducts($skip: String!, $take: String!) {\n        allProducts(skip: $skip, take: $take) {\n            id\n            name\n        }\n    }\n`;\nexport default function ProductDetails({\n  loading,\n  data\n}) {\n  if (!loading) {\n    return __jsx(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 16\n      }\n    });\n  }\n\n  const classes = useStyles();\n  return __jsx(Card, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(CardMedia, {\n    className: classes.img,\n    image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRROrogs_AtLLQ3iO8Ji3UsVNGhqgGKCqOt7Q&usqp=CAU\",\n    title: \"Live from space album cover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: classes.details,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"aaa\"), __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"Price\"), __jsx(Typography, {\n    variant: \"h5\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"isAvailable\"), __jsx(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, \"desc\")), __jsx(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    size: \"small\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"Add to cart\"))));\n} // 1\n// // @ts-ignore\n\nexport async function getServerSideProps(ctx) {\n  var _ctx$params;\n\n  // console.log('context--->', context.req)\n  const {\n    data,\n    loading\n  } = await client.query({\n    query: DETAIL_PRODUCT,\n    variables: {\n      queryStr: ctx === null || ctx === void 0 ? void 0 : (_ctx$params = ctx.params) === null || _ctx$params === void 0 ? void 0 : _ctx$params.id\n    }\n  });\n  console.log('aaaaaaa--->', data);\n  return {\n    props: {\n      loading,\n      data\n    }\n  };\n}","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/details/[id].tsx"],"names":["React","Button","Card","CardActions","CardContent","CardMedia","Typography","useStyles","gql","client","Loading","DETAIL_PRODUCT","ALL_PRODUCTS","ProductDetails","loading","data","classes","root","img","details","getServerSideProps","ctx","query","variables","queryStr","params","id","console","log","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,WAAnC,EAAgDC,SAAhD,EAA2DC,UAA3D,QAA4E,mBAA5E;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AAKA,MAAMC,cAAc,GAAGH,GAAI;;;;;;;CAA3B;AAQA,MAAMI,YAAY,GAAGJ,GAAI;;;;;;;CAAzB;AAcA,eAAe,SAASK,cAAT,CAAyB;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAzB,EAAoD;AAC/D,MAAI,CAACD,OAAL,EAAc;AACV,WAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAGD,QAAME,OAAO,GAAGT,SAAS,EAAzB;AACA,SACA,MAAC,IAAD;AAAM,IAAA,SAAS,EAAES,OAAO,CAACC,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AACI,IAAA,SAAS,EAAED,OAAO,CAACE,GADvB;AAEI,IAAA,KAAK,EAAC,uGAFV;AAGI,IAAA,KAAK,EAAC,6BAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAMI;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACG,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAY,IAAA,SAAS,EAAC,IAAtB;AAA2B,IAAA,OAAO,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,EAII,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,WAApB;AAAgC,IAAA,KAAK,EAAC,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJJ,EAOI,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,KAAK,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPJ,EAUI,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,CADJ,EAeI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,OAAb;AAAqB,IAAA,KAAK,EAAC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CAfJ,CANJ,CADA;AA8BH,C,CAED;AAGA;;AACA,OAAO,eAAeC,kBAAf,CAAkCC,GAAlC,EAAuC;AAAA;;AAC1C;AACA,QAAM;AAACN,IAAAA,IAAD;AAAOD,IAAAA;AAAP,MAAmB,MAAML,MAAM,CAACa,KAAP,CAAa;AACxCA,IAAAA,KAAK,EAAEX,cADiC;AAExCY,IAAAA,SAAS,EAAE;AAACC,MAAAA,QAAQ,EAAEH,GAAF,aAAEA,GAAF,sCAAEA,GAAG,CAAEI,MAAP,gDAAE,YAAaC;AAAxB;AAF6B,GAAb,CAA/B;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Bb,IAA3B;AACA,SAAO;AAACc,IAAAA,KAAK,EAAE;AAAEf,MAAAA,OAAF;AAAWC,MAAAA;AAAX;AAAR,GAAP;AACH","sourcesContent":["import React from 'react'\nimport {Button, Card, CardActions, CardContent, CardMedia, Typography} from \"@material-ui/core\"\nimport useStyles from '../style'\nimport { gql } from '@apollo/client'\nimport {GetStaticPaths, GetStaticProps} from \"next\";\nimport client from \"../../apollo\";\nimport Loading from \"../../../components/Loading\";\nimport {Product} from \"../../../interfaces\";\nimport {paramCase} from \"param-case\";\n\n\nconst DETAIL_PRODUCT = gql`\n    query product($queryStr: String!) {\n        product(queryStr: $queryStr) {\n            id\n            name\n        }\n    }\n`\nconst ALL_PRODUCTS = gql`\n    query allProducts($skip: String!, $take: String!) {\n        allProducts(skip: $skip, take: $take) {\n            id\n            name\n        }\n    }\n`\n\nexport interface IProduct {\n   loading: boolean,\n    data: Product\n}\n\nexport default function ProductDetails ({loading, data}: IProduct) {\n    if( !loading) {\n        return <Loading/>\n    }\n\n\n    const classes = useStyles()\n    return (\n    <Card className={classes.root}>\n        <CardMedia\n            className={classes.img}\n            image=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRROrogs_AtLLQ3iO8Ji3UsVNGhqgGKCqOt7Q&usqp=CAU\"\n            title=\"Live from space album cover\"\n        />\n        <div className={classes.details}>\n            <CardContent>\n                <Typography component=\"h1\" variant=\"h3\">\n                   aaa\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                    Price\n                </Typography>\n                <Typography variant=\"h5\" color=\"textSecondary\">\n                    isAvailable\n                </Typography>\n                <Typography variant=\"subtitle2\">\n                    desc\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\" color=\"primary\">\n                    Add to cart\n                </Button>\n            </CardActions>\n        </div>\n    </Card>\n    );\n}\n\n// 1\n\n\n// // @ts-ignore\nexport async function getServerSideProps(ctx) {\n    // console.log('context--->', context.req)\n    const {data, loading } = await client.query({\n        query: DETAIL_PRODUCT,\n        variables: {queryStr: ctx?.params?.id}\n    })\n    console.log('aaaaaaa--->', data)\n    return {props: { loading, data }}\n}"]},"metadata":{},"sourceType":"module"}