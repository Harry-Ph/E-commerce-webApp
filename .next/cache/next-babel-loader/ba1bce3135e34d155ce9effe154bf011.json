{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Button, Card, CardContent, CircularProgress, Grid, MenuItem, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object, string } from 'yup';\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { Select } from 'formik-material-ui';\nimport { request } from \"graphql-request\";\nimport { trigger, mutate } from 'swr';\nimport Router from \"next/router\";\nconst API = 'http://localhost:3000/api/graphql';\n\nconst sleep = time => new Promise(acc => setTimeout(acc, time));\n/* GraphQL */\n\n\nconst CREATE_PRODUCT2 =\n/* GraphQL */\n`\n    mutation createNewOneProduct($name: String!) {\n        createNewOneProduct(name: $name) {\n            id\n            name\n        }\n    }\n`;\nexport default function CreateProduct() {\n  // const [addProduct] = useMutation(CREATE_PRODUCT);\n  // the mutate function will do the refetching for us\n  // const { mutate } = useSWR(CREATE_PRODUCT2);\n  return __jsx(Card, null, __jsx(CardContent, null, __jsx(FormikStepper, {\n    initialValues: {\n      name: '',\n      brand: 'Other',\n      isAvailable: false,\n      money: 0,\n      description: ''\n    },\n    onSubmit: async values => {\n      await sleep(2000); // try {\n      //   const {data} = await client.query({\n      //     query: CREATE_PRODUCT,\n      //     variables: {\n      //       name: 'test hang'\n      //     }\n      //   })\n      //   // const {  data } = await client.query({\n      //   //   query: ALL_PRODUCTS,\n      //   //   variables: {\n      //   //     skip: 0,\n      //   //     take: 10\n      //   //   }\n      //   // })\n      //   console.log('dataaaa ne-> ', data)\n      // } catch (e) {\n      //   throw new Error(e)\n      //   console.log(e)\n      // }\n      // const {data} = await client.query({\n      //   query: CREATE_PRODUCT,\n      //   variables: {\n      //     name: 'test hang'\n      //   }\n      // })\n      // call mutate here to refetch the new product after clicking\n\n      await mutate(API);\n      const {\n        createNewOneProduct\n      } = await request(API, CREATE_PRODUCT2, {\n        name: values.name\n      });\n      console.log('data check', createNewOneProduct);\n      await trigger(API); // const productData = await addProduct({  variables: {\n      //     name: values!.name\n      //   } });\n\n      await Router.push(`/products/details/${createNewOneProduct.id}`);\n    }\n  }, __jsx(FormikStep, {\n    label: \"Data Info\",\n    validationSchema: object({\n      name: string().required().min(3).max(100)\n    })\n  }, __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"name\",\n    component: TextField,\n    label: \"Name\"\n  })), __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(FormGroup, null, __jsx(Field, {\n    name: \"brand\",\n    component: Select,\n    label: \"Brand\"\n  }, __jsx(MenuItem, {\n    value: \"Nike\"\n  }, \"Nike\"), __jsx(MenuItem, {\n    value: \"Adidas\"\n  }, \"Adidas\"), __jsx(MenuItem, {\n    value: \"Puma\"\n  }, \"Puma\"), __jsx(MenuItem, {\n    value: \"Gucci\"\n  }, \"Gucci\"), __jsx(MenuItem, {\n    value: \"Dior\"\n  }, \"Dior\"), __jsx(MenuItem, {\n    value: \"Nana\"\n  }, \"Nana\"), __jsx(MenuItem, {\n    defaultChecked: true,\n    value: \"Other\"\n  }, \"Other\")))), __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(Field, {\n    name: \"isAvailable\",\n    type: \"checkbox\",\n    component: CheckboxWithLabel,\n    Label: {\n      label: 'Is product still available?'\n    }\n  }))), __jsx(FormikStep, {\n    label: \"Price\",\n    validationSchema: object({\n      money: mixed().when('isAvailable', {\n        is: true,\n        then: number().required().min(0, 'The min-price of product is 0 eur'),\n        otherwise: number().required()\n      })\n    })\n  }, __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"money\",\n    type: \"number\",\n    component: TextField,\n    label: \"All the money I have\"\n  }))), __jsx(FormikStep, {\n    label: \"More Info\"\n  }, __jsx(Box, {\n    paddingBottom: 2\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"description\",\n    component: TextField,\n    label: \"Description\"\n  }))))));\n}\nexport function FormikStep({\n  children\n}) {\n  return __jsx(React.Fragment, null, children);\n}\nexport function FormikStepper(_ref) {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const childrenArray = React.Children.toArray(children);\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const currentChild = childrenArray[step];\n  const {\n    0: completed,\n    1: setCompleted\n  } = useState(false);\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return __jsx(Formik, _extends({}, props, {\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: async (values, helpers) => {\n      if (isLastStep()) {\n        await props.onSubmit(values, helpers);\n        setCompleted(true);\n      } else {\n        setStep(s => s + 1);\n      }\n    }\n  }), ({\n    isSubmitting\n  }) => __jsx(Form, {\n    autoComplete: \"off\"\n  }, __jsx(Stepper, {\n    alternativeLabel: true,\n    activeStep: step\n  }, childrenArray.map((child, index) => __jsx(Step, {\n    key: child.props.label,\n    completed: step > index || completed\n  }, __jsx(StepLabel, null, child.props.label)))), currentChild, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, step > 0 ? __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    disabled: isSubmitting,\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => setStep(s => s - 1)\n  }, \"Back\")) : null, __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    startIcon: isSubmitting ? __jsx(CircularProgress, {\n      size: \"1rem\"\n    }) : null,\n    disabled: isSubmitting,\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\"\n  }, isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next')))));\n}","map":null,"metadata":{},"sourceType":"module"}