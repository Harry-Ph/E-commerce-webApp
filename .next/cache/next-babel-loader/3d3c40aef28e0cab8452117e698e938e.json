{"ast":null,"code":"var _jsxFileName = \"/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/create.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Button, Card, CardContent, CircularProgress, Grid, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object } from 'yup';\n\nconst sleep = time => new Promise(acc => setTimeout(acc, time));\n\nexport default function Home() {\n  return __jsx(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, __jsx(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, __jsx(FormikStepper, {\n    initialValues: {\n      name: '',\n      brand: '',\n      isAvailable: false,\n      money: 0,\n      description: ''\n    },\n    onSubmit: async values => {\n      await sleep(3000);\n      console.log('values', values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, __jsx(FormikStep, {\n    label: \"Data Info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"name\",\n    component: TextField,\n    label: \"Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"brand\",\n    component: TextField,\n    label: \"Brand\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    name: \"isAvailable\",\n    type: \"checkbox\",\n    component: CheckboxWithLabel,\n    Label: {\n      label: 'Is product still available?'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"Price\",\n    validationSchema: object({\n      money: mixed().when('price', {\n        is: true,\n        then: number().required().min(0, \"Min of product's price is 0\"),\n        otherwise: number().required()\n      })\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"price\",\n    type: \"number\",\n    component: TextField,\n    label: \"Price of product\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }))), __jsx(FormikStep, {\n    label: \"More Info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    paddingBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, __jsx(Field, {\n    fullWidth: true,\n    name: \"description\",\n    component: TextField,\n    label: \"Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }))))));\n}\nexport function FormikStep({\n  children\n}) {\n  return __jsx(React.Fragment, null, children);\n}\nexport function FormikStepper(_ref) {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const childrenArray = React.Children.toArray(children);\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const currentChild = childrenArray[step];\n  const {\n    0: completed,\n    1: setCompleted\n  } = useState(false);\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return __jsx(Formik, _extends({}, props, {\n    validationSchema: currentChild.props.validationSchema,\n    onSubmit: async (values, helpers) => {\n      if (isLastStep()) {\n        await props.onSubmit(values, helpers);\n        setCompleted(true);\n      } else {\n        setStep(s => s + 1);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }), ({\n    isSubmitting\n  }) => __jsx(Form, {\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, __jsx(Stepper, {\n    alternativeLabel: true,\n    activeStep: step,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, childrenArray.map((child, index) => __jsx(Step, {\n    key: child.props.label,\n    completed: step > index || completed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, __jsx(StepLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, child.props.label)))), currentChild, __jsx(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, step > 0 ? __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    disabled: isSubmitting,\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => setStep(s => s - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, \"Back\")) : null, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    startIcon: isSubmitting ? __jsx(CircularProgress, {\n      size: \"1rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 43\n      }\n    }) : null,\n    disabled: isSubmitting,\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next')))));\n}","map":{"version":3,"sources":["/Users/phan/Desktop/Integrify/fullstack-graphql-next-nexus-prisma/pages/products/create.tsx"],"names":["Box","Button","Card","CardContent","CircularProgress","Grid","Step","StepLabel","Stepper","Field","Form","Formik","CheckboxWithLabel","TextField","React","useState","mixed","number","object","sleep","time","Promise","acc","setTimeout","Home","name","brand","isAvailable","money","description","values","console","log","label","when","is","then","required","min","otherwise","FormikStep","children","FormikStepper","props","childrenArray","Children","toArray","step","setStep","currentChild","completed","setCompleted","isLastStep","length","validationSchema","helpers","onSubmit","s","isSubmitting","map","child","index"],"mappings":"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","sourcesContent":["import { Box, Button, Card, CardContent, CircularProgress, Grid, Step, StepLabel, Stepper } from '@material-ui/core';\nimport { Field, Form, Formik, FormikConfig, FormikValues } from 'formik';\nimport { CheckboxWithLabel, TextField } from 'formik-material-ui';\nimport React, { useState } from 'react';\nimport { mixed, number, object } from 'yup';\n\nconst sleep = (time) => new Promise((acc) => setTimeout(acc, time));\n\nexport default function Home() {\n  return (\n    <Card>\n      <CardContent>\n        <FormikStepper\n          initialValues={{\n            name: '',\n            brand: '',\n            isAvailable: false,\n            money: 0,\n            description: '',\n          }}\n          onSubmit={async (values) => {\n            await sleep(3000);\n            console.log('values', values);\n          }}\n        >\n          <FormikStep label=\"Data Info\">\n            <Box paddingBottom={2}>\n              <Field fullWidth name=\"name\" component={TextField} label=\"Name\" />\n            </Box>\n            <Box paddingBottom={2}>\n              <Field fullWidth name=\"brand\" component={TextField} label=\"Brand\" />\n            </Box>\n            <Box paddingBottom={2}>\n              <Field\n                name=\"isAvailable\"\n                type=\"checkbox\"\n                component={CheckboxWithLabel}\n                Label={{ label: 'Is product still available?' }}\n              />\n            </Box>\n          </FormikStep>\n          <FormikStep\n            label=\"Price\"\n            validationSchema={object({\n              money: mixed().when('price', {\n                is: true,\n                then: number()\n                  .required()\n                  .min(\n                    0,\n                    \"Min of product's price is 0\"\n                  ),\n                otherwise: number().required(),\n              }),\n            })}\n          >\n            <Box paddingBottom={2}>\n              <Field\n                fullWidth\n                name=\"price\"\n                type=\"number\"\n                component={TextField}\n                label=\"Price of product\"\n              />\n            </Box>\n          </FormikStep>\n          <FormikStep label=\"More Info\">\n            <Box paddingBottom={2}>\n              <Field fullWidth name=\"description\" component={TextField} label=\"Description\" />\n            </Box>\n          </FormikStep>\n        </FormikStepper>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport interface FormikStepProps\n  extends Pick<FormikConfig<FormikValues>, 'children' | 'validationSchema'> {\n  label: string;\n}\n\nexport function FormikStep({ children }: FormikStepProps) {\n  return <>{children}</>;\n}\n\nexport function FormikStepper({ children, ...props }: FormikConfig<FormikValues>) {\n  const childrenArray = React.Children.toArray(children) as React.ReactElement<FormikStepProps>[];\n  const [step, setStep] = useState(0);\n  const currentChild = childrenArray[step];\n  const [completed, setCompleted] = useState(false);\n\n  function isLastStep() {\n    return step === childrenArray.length - 1;\n  }\n\n  return (\n    <Formik\n      {...props}\n      validationSchema={currentChild.props.validationSchema}\n      onSubmit={async (values, helpers) => {\n        if (isLastStep()) {\n          await props.onSubmit(values, helpers);\n          setCompleted(true);\n        } else {\n          setStep((s) => s + 1);\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <Stepper alternativeLabel activeStep={step}>\n            {childrenArray.map((child, index) => (\n              <Step key={child.props.label} completed={step > index || completed}>\n                <StepLabel>{child.props.label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n\n          {currentChild}\n\n          <Grid container spacing={2}>\n            {step > 0 ? (\n              <Grid item>\n                <Button\n                  disabled={isSubmitting}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => setStep((s) => s - 1)}\n                >\n                  Back\n                </Button>\n              </Grid>\n            ) : null}\n            <Grid item>\n              <Button\n                startIcon={isSubmitting ? <CircularProgress size=\"1rem\" /> : null}\n                disabled={isSubmitting}\n                variant=\"contained\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                {isSubmitting ? 'Submitting' : isLastStep() ? 'Submit' : 'Next'}\n              </Button>\n            </Grid>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  );\n}"]},"metadata":{},"sourceType":"module"}