{"ast":null,"code":"import { schema, use } from \"nexus\";\nimport { prisma } from \"nexus-plugin-prisma\";\nuse(prisma({\n  features: {\n    crud: true\n  }\n}));\nschema.objectType({\n  name: \"Ppl\",\n\n  definition(t) {\n    t.model.id();\n    t.model.name();\n  }\n\n});\nschema.objectType({\n  name: \"Product\",\n\n  definition(t) {\n    t.model.id();\n    t.model.name();\n  }\n\n});\nschema.addToContext(_req => {\n  return {\n    customReq: _req\n  };\n});\nschema.queryType({\n  async definition(t) {\n    t.list.field(\"allUsers\", {\n      type: \"Ppl\",\n\n      resolve(_parent, _args, ctx) {\n        return ctx.db.ppl.findMany({});\n      }\n\n    });\n    t.crud.ppl();\n    t.crud.ppls();\n    t.list.field(\"allProducts\", {\n      type: \"Product\",\n      args: {\n        skip: schema.stringArg({\n          nullable: true\n        }),\n        take: schema.stringArg({\n          nullable: true\n        })\n      },\n\n      resolve(_parent, _args, ctx) {\n        console.log(_args.skip, _args.take);\n        console.log(333);\n        return ctx.db.product.findMany({\n          skip: parseInt(_args === null || _args === void 0 ? void 0 : _args.skip),\n          take: parseInt(_args === null || _args === void 0 ? void 0 : _args.take)\n        });\n      }\n\n    });\n    t.list.field(\"product\", {\n      type: \"Product\",\n      args: {\n        queryStr: schema.stringArg({\n          nullable: true\n        })\n      },\n      resolve: async (_parent, _args, ctx) => {\n        try {\n          const product = await ctx.db.product.findMany({\n            where: {\n              OR: [{\n                id: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }, {\n                name: _args === null || _args === void 0 ? void 0 : _args.queryStr\n              }]\n            }\n          }); // const product = t.crud.product(_args?.id!.toString() as ProductWhereUniqueInput);\n\n          return product;\n        } catch (error) {\n          throw new Error(error);\n        }\n      }\n    }); // t.crud.product();\n    // t.crud.products();\n  }\n\n});\nschema.mutationType({\n  definition(t) {\n    t.field(\"bigRedButton\", {\n      type: \"String\",\n\n      async resolve(_parent, _args, ctx) {\n        const {\n          count\n        } = await ctx.db.ppl.deleteMany({});\n        return `${count} user(s) destroyed. Thanos will be proud.`;\n      }\n\n    });\n    t.crud.createOnePpl();\n    t.crud.deleteOnePpl();\n    t.crud.deleteManyPpl();\n    t.crud.updateOnePpl();\n    t.crud.updateManyPpl();\n    t.field(\"productMutation\", {\n      type: \"String\",\n\n      async resolve(_parent, _args, ctx) {\n        const {\n          count\n        } = await ctx.db.product.deleteMany({});\n        return `${count} user(s) destroyed. Thanos will be proud.`;\n      }\n\n    });\n    t.crud.createOneProduct();\n    t.crud.deleteOneProduct();\n    t.crud.deleteManyProduct();\n    t.crud.updateOneProduct();\n    t.crud.updateManyProduct();\n  }\n\n}); // schema.mutationType({\n//   definition(t) {\n//     t.field(\"bigRedButton\", {\n//       type: \"String\",\n//       async resolve(_parent, _args, ctx) {\n//         const { count } = await ctx.db.ppl.deleteMany({});\n//         return `${count} user(s) destroyed. Thanos will be proud.`;\n//       },\n//     });\n//\n//     t.crud.createOnePpl();\n//     t.crud.deleteOnePpl();\n//     t.crud.deleteManyPpl();\n//     t.crud.updateOnePpl();\n//     t.crud.updateManyPpl();\n//   },\n// });","map":null,"metadata":{},"sourceType":"module"}